
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c88  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000db8  08000db8  00010db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ddc  08000ddc  00010de4  2**0
                  CONTENTS
  4 .ARM          00000000  08000ddc  08000ddc  00010de4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ddc  08000de4  00010de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ddc  08000ddc  00010ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de0  08000de0  00010de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000de4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000de4  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010de4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033e4  00000000  00000000  00010e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000806  00000000  00000000  000141f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000008dc  00000000  00000000  000149f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000190  00000000  00000000  000152d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000148  00000000  00000000  00015468  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000b5e  00000000  00000000  000155b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001cd4  00000000  00000000  0001610e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000973f  00000000  00000000  00017de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00021521  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004d0  00000000  00000000  0002159c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000da0 	.word	0x08000da0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000da0 	.word	0x08000da0

08000170 <LCD_KICK>:
 * @retval			- None
 * Note				- None
 */
void LCD_KICK(void)

{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//ClearBit(LCD_CTRL, EN_Switch);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017a:	4807      	ldr	r0, [pc, #28]	; (8000198 <LCD_KICK+0x28>)
 800017c:	f000 fd31 	bl	8000be2 <MCAL_GPIO_WritePin>
	wait(20); //Delay Between Writing Each Letter
 8000180:	2014      	movs	r0, #20
 8000182:	f000 fd53 	bl	8000c2c <wait>
	//SetBit(LCD_CTRL, EN_Switch);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018c:	4802      	ldr	r0, [pc, #8]	; (8000198 <LCD_KICK+0x28>)
 800018e:	f000 fd28 	bl	8000be2 <MCAL_GPIO_WritePin>

}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40010800 	.word	0x40010800

0800019c <LCD_clear_screen>:
 * @param [in]		- None
 * @retval			- None
 * Note				- None
 */
void LCD_clear_screen(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80001a0:	2001      	movs	r0, #1
 80001a2:	f000 f8c3 	bl	800032c <LCD_WRITE_COMMAND>
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <LCD_INIT>:
 * @param [in]		- None
 * @retval			- None
 * Note				- None
 */
void LCD_INIT()
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	wait(20);
 80001b0:	2014      	movs	r0, #20
 80001b2:	f000 fd3b 	bl	8000c2c <wait>
	//Write Mode
	//	LCD_DataDir_CTRL |= (1 << EN_Switch) | (1 << RW_SWITCH) | (1 << RS_SWITCH);
	//	LCD_CTRL &= ~((1 << EN_Switch) | (1 << RW_SWITCH) | (1 << RS_SWITCH));

	//EN_Switch, RW_SWITCH, RS_SWITCH Set as Output Push-Pull
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001b6:	4b5b      	ldr	r3, [pc, #364]	; (8000324 <LCD_INIT+0x178>)
 80001b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001bc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001be:	4b59      	ldr	r3, [pc, #356]	; (8000324 <LCD_INIT+0x178>)
 80001c0:	2204      	movs	r2, #4
 80001c2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80001c4:	4b57      	ldr	r3, [pc, #348]	; (8000324 <LCD_INIT+0x178>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001ca:	4956      	ldr	r1, [pc, #344]	; (8000324 <LCD_INIT+0x178>)
 80001cc:	4856      	ldr	r0, [pc, #344]	; (8000328 <LCD_INIT+0x17c>)
 80001ce:	f000 fc82 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001d2:	4b54      	ldr	r3, [pc, #336]	; (8000324 <LCD_INIT+0x178>)
 80001d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001d8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001da:	4b52      	ldr	r3, [pc, #328]	; (8000324 <LCD_INIT+0x178>)
 80001dc:	2204      	movs	r2, #4
 80001de:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80001e0:	4b50      	ldr	r3, [pc, #320]	; (8000324 <LCD_INIT+0x178>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001e6:	494f      	ldr	r1, [pc, #316]	; (8000324 <LCD_INIT+0x178>)
 80001e8:	484f      	ldr	r0, [pc, #316]	; (8000328 <LCD_INIT+0x17c>)
 80001ea:	f000 fc74 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001ee:	4b4d      	ldr	r3, [pc, #308]	; (8000324 <LCD_INIT+0x178>)
 80001f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001f4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001f6:	4b4b      	ldr	r3, [pc, #300]	; (8000324 <LCD_INIT+0x178>)
 80001f8:	2204      	movs	r2, #4
 80001fa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80001fc:	4b49      	ldr	r3, [pc, #292]	; (8000324 <LCD_INIT+0x178>)
 80001fe:	2201      	movs	r2, #1
 8000200:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000202:	4948      	ldr	r1, [pc, #288]	; (8000324 <LCD_INIT+0x178>)
 8000204:	4848      	ldr	r0, [pc, #288]	; (8000328 <LCD_INIT+0x17c>)
 8000206:	f000 fc66 	bl	8000ad6 <MCAL_GPIO_Init>

	//=====================================================
	//Set PIN 0 >> 7 Set as Output Push-Pull
	//LCD_DataDir_PORT = 0xFF;
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800020a:	4b46      	ldr	r3, [pc, #280]	; (8000324 <LCD_INIT+0x178>)
 800020c:	2201      	movs	r2, #1
 800020e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000210:	4b44      	ldr	r3, [pc, #272]	; (8000324 <LCD_INIT+0x178>)
 8000212:	2204      	movs	r2, #4
 8000214:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000216:	4b43      	ldr	r3, [pc, #268]	; (8000324 <LCD_INIT+0x178>)
 8000218:	2201      	movs	r2, #1
 800021a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800021c:	4941      	ldr	r1, [pc, #260]	; (8000324 <LCD_INIT+0x178>)
 800021e:	4842      	ldr	r0, [pc, #264]	; (8000328 <LCD_INIT+0x17c>)
 8000220:	f000 fc59 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000224:	4b3f      	ldr	r3, [pc, #252]	; (8000324 <LCD_INIT+0x178>)
 8000226:	2202      	movs	r2, #2
 8000228:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800022a:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <LCD_INIT+0x178>)
 800022c:	2204      	movs	r2, #4
 800022e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000230:	4b3c      	ldr	r3, [pc, #240]	; (8000324 <LCD_INIT+0x178>)
 8000232:	2201      	movs	r2, #1
 8000234:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000236:	493b      	ldr	r1, [pc, #236]	; (8000324 <LCD_INIT+0x178>)
 8000238:	483b      	ldr	r0, [pc, #236]	; (8000328 <LCD_INIT+0x17c>)
 800023a:	f000 fc4c 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800023e:	4b39      	ldr	r3, [pc, #228]	; (8000324 <LCD_INIT+0x178>)
 8000240:	2204      	movs	r2, #4
 8000242:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	4b37      	ldr	r3, [pc, #220]	; (8000324 <LCD_INIT+0x178>)
 8000246:	2204      	movs	r2, #4
 8000248:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 800024a:	4b36      	ldr	r3, [pc, #216]	; (8000324 <LCD_INIT+0x178>)
 800024c:	2201      	movs	r2, #1
 800024e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000250:	4934      	ldr	r1, [pc, #208]	; (8000324 <LCD_INIT+0x178>)
 8000252:	4835      	ldr	r0, [pc, #212]	; (8000328 <LCD_INIT+0x17c>)
 8000254:	f000 fc3f 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000258:	4b32      	ldr	r3, [pc, #200]	; (8000324 <LCD_INIT+0x178>)
 800025a:	2208      	movs	r2, #8
 800025c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800025e:	4b31      	ldr	r3, [pc, #196]	; (8000324 <LCD_INIT+0x178>)
 8000260:	2204      	movs	r2, #4
 8000262:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000264:	4b2f      	ldr	r3, [pc, #188]	; (8000324 <LCD_INIT+0x178>)
 8000266:	2201      	movs	r2, #1
 8000268:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800026a:	492e      	ldr	r1, [pc, #184]	; (8000324 <LCD_INIT+0x178>)
 800026c:	482e      	ldr	r0, [pc, #184]	; (8000328 <LCD_INIT+0x17c>)
 800026e:	f000 fc32 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <LCD_INIT+0x178>)
 8000274:	2210      	movs	r2, #16
 8000276:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000278:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <LCD_INIT+0x178>)
 800027a:	2204      	movs	r2, #4
 800027c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 800027e:	4b29      	ldr	r3, [pc, #164]	; (8000324 <LCD_INIT+0x178>)
 8000280:	2201      	movs	r2, #1
 8000282:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000284:	4927      	ldr	r1, [pc, #156]	; (8000324 <LCD_INIT+0x178>)
 8000286:	4828      	ldr	r0, [pc, #160]	; (8000328 <LCD_INIT+0x17c>)
 8000288:	f000 fc25 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800028c:	4b25      	ldr	r3, [pc, #148]	; (8000324 <LCD_INIT+0x178>)
 800028e:	2220      	movs	r2, #32
 8000290:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000292:	4b24      	ldr	r3, [pc, #144]	; (8000324 <LCD_INIT+0x178>)
 8000294:	2204      	movs	r2, #4
 8000296:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <LCD_INIT+0x178>)
 800029a:	2201      	movs	r2, #1
 800029c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800029e:	4921      	ldr	r1, [pc, #132]	; (8000324 <LCD_INIT+0x178>)
 80002a0:	4821      	ldr	r0, [pc, #132]	; (8000328 <LCD_INIT+0x17c>)
 80002a2:	f000 fc18 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80002a6:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <LCD_INIT+0x178>)
 80002a8:	2240      	movs	r2, #64	; 0x40
 80002aa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <LCD_INIT+0x178>)
 80002ae:	2204      	movs	r2, #4
 80002b0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <LCD_INIT+0x178>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002b8:	491a      	ldr	r1, [pc, #104]	; (8000324 <LCD_INIT+0x178>)
 80002ba:	481b      	ldr	r0, [pc, #108]	; (8000328 <LCD_INIT+0x17c>)
 80002bc:	f000 fc0b 	bl	8000ad6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <LCD_INIT+0x178>)
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	4b17      	ldr	r3, [pc, #92]	; (8000324 <LCD_INIT+0x178>)
 80002c8:	2204      	movs	r2, #4
 80002ca:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <LCD_INIT+0x178>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002d2:	4914      	ldr	r1, [pc, #80]	; (8000324 <LCD_INIT+0x178>)
 80002d4:	4814      	ldr	r0, [pc, #80]	; (8000328 <LCD_INIT+0x17c>)
 80002d6:	f000 fbfe 	bl	8000ad6 <MCAL_GPIO_Init>

	//============================================================

	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e0:	4811      	ldr	r0, [pc, #68]	; (8000328 <LCD_INIT+0x17c>)
 80002e2:	f000 fc7e 	bl	8000be2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <LCD_INIT+0x17c>)
 80002ee:	f000 fc78 	bl	8000be2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <LCD_INIT+0x17c>)
 80002fa:	f000 fc72 	bl	8000be2 <MCAL_GPIO_WritePin>

	//=======================================================
	wait(15);
 80002fe:	200f      	movs	r0, #15
 8000300:	f000 fc94 	bl	8000c2c <wait>
	LCD_clear_screen();
 8000304:	f7ff ff4a 	bl	800019c <LCD_clear_screen>

#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000308:	2038      	movs	r0, #56	; 0x38
 800030a:	f000 f80f 	bl	800032c <LCD_WRITE_COMMAND>
#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02); //command to tell LCD we are using D4 -> D7
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800030e:	2006      	movs	r0, #6
 8000310:	f000 f80c 	bl	800032c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	f000 f809 	bl	800032c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800031a:	200f      	movs	r0, #15
 800031c:	f000 f806 	bl	800032c <LCD_WRITE_COMMAND>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000001c 	.word	0x2000001c
 8000328:	40010800 	.word	0x40010800

0800032c <LCD_WRITE_COMMAND>:
 * @param [in]		- command: Specifies the Command code according to @ref LCD_define
 * @retval			- None
 * Note				- None
 */
void LCD_WRITE_COMMAND(vuint8_t command)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
#ifdef EIGHT_BIT_MODE
	//	LCD_CTRL  = command;
	//	LCD_CTRL &= ~((1 << RW_SWITCH) | (1 << RS_SWITCH));
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	b29b      	uxth	r3, r3
 800033c:	4619      	mov	r1, r3
 800033e:	480c      	ldr	r0, [pc, #48]	; (8000370 <LCD_WRITE_COMMAND+0x44>)
 8000340:	f000 fc66 	bl	8000c10 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <LCD_WRITE_COMMAND+0x44>)
 800034c:	f000 fc49 	bl	8000be2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <LCD_WRITE_COMMAND+0x44>)
 8000358:	f000 fc43 	bl	8000be2 <MCAL_GPIO_WritePin>

	wait(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f000 fc65 	bl	8000c2c <wait>
	LCD_KICK();
 8000362:	f7ff ff05 	bl	8000170 <LCD_KICK>
	LCD_CTRL  = (LCD_CTRL  & 0x0F) | (command << DATA_shift);
	LCD_CTRL &= ~((1 << RW_SWITCH) | (1 << RS_SWITCH));
	wait(10);
	LCD_KICK();
#endif
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010800 	.word	0x40010800

08000374 <LCD_WRITE_CHAR>:
 * @param [in]		- character: Specifies the character cod be written on LCD
 * @retval			- None
 * Note				- None
 */
void LCD_WRITE_CHAR(vuint8_t character)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	//  LCD_check_lcd_isbusy();
#ifdef EIGHT_BIT_MODE
	//	LCD_CTRL  = character;
	//	SetBit(LCD_CTRL, RS_SWITCH);
	//	ClearBit(LCD_CTRL, RW_SWITCH);
	MCAL_GPIO_WritePort(LCD_CTRL , character);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	b29b      	uxth	r3, r3
 8000384:	4619      	mov	r1, r3
 8000386:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LCD_WRITE_CHAR+0x44>)
 8000388:	f000 fc42 	bl	8000c10 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000392:	4809      	ldr	r0, [pc, #36]	; (80003b8 <LCD_WRITE_CHAR+0x44>)
 8000394:	f000 fc25 	bl	8000be2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039e:	4806      	ldr	r0, [pc, #24]	; (80003b8 <LCD_WRITE_CHAR+0x44>)
 80003a0:	f000 fc1f 	bl	8000be2 <MCAL_GPIO_WritePin>

	wait(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 fc41 	bl	8000c2c <wait>
	LCD_KICK();
 80003aa:	f7ff fee1 	bl	8000170 <LCD_KICK>
	SetBit(LCD_CTRL, RS_SWITCH);
	ClearBit(LCD_CTRL, RW_SWITCH);
	wait(10);
	LCD_KICK();
#endif
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010800 	.word	0x40010800

080003bc <LCD_WRITE_STRING>:
 * @param [in]		- string: Specifies the string to be written on LCD
 * @retval			- None
 * Note				- None
 */
void LCD_WRITE_STRING(char* string)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	vuint8_t count = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	73fb      	strb	r3, [r7, #15]
	while(*string > 0)
 80003c8:	e020      	b.n	800040c <LCD_WRITE_STRING+0x50>
	{
		LCD_WRITE_CHAR(*(string)++);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	607a      	str	r2, [r7, #4]
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ffce 	bl	8000374 <LCD_WRITE_CHAR>
		count ++;
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	73fb      	strb	r3, [r7, #15]
		if(count == 16)
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b10      	cmp	r3, #16
 80003e8:	d104      	bne.n	80003f4 <LCD_WRITE_STRING+0x38>
		{
			LCD_GOTO_XY(2, 0);
 80003ea:	2100      	movs	r1, #0
 80003ec:	2002      	movs	r0, #2
 80003ee:	f000 f815 	bl	800041c <LCD_GOTO_XY>
 80003f2:	e00b      	b.n	800040c <LCD_WRITE_STRING+0x50>
		}
		else if(count == 32)
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b20      	cmp	r3, #32
 80003fa:	d107      	bne.n	800040c <LCD_WRITE_STRING+0x50>
		{
			//wait(); add delay here before Clearing Screen
			LCD_clear_screen();
 80003fc:	f7ff fece 	bl	800019c <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000400:	2100      	movs	r1, #0
 8000402:	2001      	movs	r0, #1
 8000404:	f000 f80a 	bl	800041c <LCD_GOTO_XY>
			count = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	73fb      	strb	r3, [r7, #15]
	while(*string > 0)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1da      	bne.n	80003ca <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <LCD_GOTO_XY>:
 * 								 value [0:16]
 * @retval			- None
 * Note				- None
 */
void LCD_GOTO_XY(vuint8_t line, vuint8_t position)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	460a      	mov	r2, r1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	71bb      	strb	r3, [r7, #6]
	if(line == 1)
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b01      	cmp	r3, #1
 8000432:	d107      	bne.n	8000444 <LCD_GOTO_XY+0x28>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	3b80      	subs	r3, #128	; 0x80
 800043a:	b2db      	uxtb	r3, r3
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff75 	bl	800032c <LCD_WRITE_COMMAND>
	}
	else if(line == 2)
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
	}
}
 8000442:	e00a      	b.n	800045a <LCD_GOTO_XY+0x3e>
	else if(line == 2)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b02      	cmp	r3, #2
 800044a:	d106      	bne.n	800045a <LCD_GOTO_XY+0x3e>
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 800044c:	79bb      	ldrb	r3, [r7, #6]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	3b40      	subs	r3, #64	; 0x40
 8000452:	b2db      	uxtb	r3, r3
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff69 	bl	800032c <LCD_WRITE_COMMAND>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <Enable_NVIC>:
 * ================================================================
 *
 * */

void Enable_NVIC(uint16 IRQ)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	2b0f      	cmp	r3, #15
 8000472:	d854      	bhi.n	800051e <Enable_NVIC+0xba>
 8000474:	a201      	add	r2, pc, #4	; (adr r2, 800047c <Enable_NVIC+0x18>)
 8000476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047a:	bf00      	nop
 800047c:	080004bd 	.word	0x080004bd
 8000480:	080004cb 	.word	0x080004cb
 8000484:	080004d9 	.word	0x080004d9
 8000488:	080004e7 	.word	0x080004e7
 800048c:	080004f5 	.word	0x080004f5
 8000490:	08000503 	.word	0x08000503
 8000494:	08000503 	.word	0x08000503
 8000498:	08000503 	.word	0x08000503
 800049c:	08000503 	.word	0x08000503
 80004a0:	08000503 	.word	0x08000503
 80004a4:	08000511 	.word	0x08000511
 80004a8:	08000511 	.word	0x08000511
 80004ac:	08000511 	.word	0x08000511
 80004b0:	08000511 	.word	0x08000511
 80004b4:	08000511 	.word	0x08000511
 80004b8:	08000511 	.word	0x08000511
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80004bc:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <Enable_NVIC+0xc4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a19      	ldr	r2, [pc, #100]	; (8000528 <Enable_NVIC+0xc4>)
 80004c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c6:	6013      	str	r3, [r2, #0]
		break;
 80004c8:	e029      	b.n	800051e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <Enable_NVIC+0xc4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a16      	ldr	r2, [pc, #88]	; (8000528 <Enable_NVIC+0xc4>)
 80004d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d4:	6013      	str	r3, [r2, #0]
		break;
 80004d6:	e022      	b.n	800051e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <Enable_NVIC+0xc4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a12      	ldr	r2, [pc, #72]	; (8000528 <Enable_NVIC+0xc4>)
 80004de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e2:	6013      	str	r3, [r2, #0]
		break;
 80004e4:	e01b      	b.n	800051e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <Enable_NVIC+0xc4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <Enable_NVIC+0xc4>)
 80004ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f0:	6013      	str	r3, [r2, #0]
		break;
 80004f2:	e014      	b.n	800051e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <Enable_NVIC+0xc4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <Enable_NVIC+0xc4>)
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fe:	6013      	str	r3, [r2, #0]
		break;
 8000500:	e00d      	b.n	800051e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <Enable_NVIC+0xc4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <Enable_NVIC+0xc4>)
 8000508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800050c:	6013      	str	r3, [r2, #0]
		break;
 800050e:	e006      	b.n	800051e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <Enable_NVIC+0xc8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a05      	ldr	r2, [pc, #20]	; (800052c <Enable_NVIC+0xc8>)
 8000516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051a:	6013      	str	r3, [r2, #0]
		break;
 800051c:	bf00      	nop

	}
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	e000e100 	.word	0xe000e100
 800052c:	e000e104 	.word	0xe000e104

08000530 <Disable_NVIC>:


void Disable_NVIC(uint16 IRQ)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d854      	bhi.n	80005ea <Disable_NVIC+0xba>
 8000540:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <Disable_NVIC+0x18>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	08000589 	.word	0x08000589
 800054c:	08000597 	.word	0x08000597
 8000550:	080005a5 	.word	0x080005a5
 8000554:	080005b3 	.word	0x080005b3
 8000558:	080005c1 	.word	0x080005c1
 800055c:	080005cf 	.word	0x080005cf
 8000560:	080005cf 	.word	0x080005cf
 8000564:	080005cf 	.word	0x080005cf
 8000568:	080005cf 	.word	0x080005cf
 800056c:	080005cf 	.word	0x080005cf
 8000570:	080005dd 	.word	0x080005dd
 8000574:	080005dd 	.word	0x080005dd
 8000578:	080005dd 	.word	0x080005dd
 800057c:	080005dd 	.word	0x080005dd
 8000580:	080005dd 	.word	0x080005dd
 8000584:	080005dd 	.word	0x080005dd
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <Disable_NVIC+0xc4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <Disable_NVIC+0xc4>)
 800058e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000592:	6013      	str	r3, [r2, #0]
		break;
 8000594:	e029      	b.n	80005ea <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <Disable_NVIC+0xc4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <Disable_NVIC+0xc4>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	6013      	str	r3, [r2, #0]
		break;
 80005a2:	e022      	b.n	80005ea <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <Disable_NVIC+0xc4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <Disable_NVIC+0xc4>)
 80005aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ae:	6013      	str	r3, [r2, #0]
		break;
 80005b0:	e01b      	b.n	80005ea <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <Disable_NVIC+0xc4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <Disable_NVIC+0xc4>)
 80005b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005bc:	6013      	str	r3, [r2, #0]
		break;
 80005be:	e014      	b.n	80005ea <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <Disable_NVIC+0xc4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <Disable_NVIC+0xc4>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
		break;
 80005cc:	e00d      	b.n	80005ea <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <Disable_NVIC+0xc4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <Disable_NVIC+0xc4>)
 80005d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005d8:	6013      	str	r3, [r2, #0]
		break;
 80005da:	e006      	b.n	80005ea <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <Disable_NVIC+0xc8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <Disable_NVIC+0xc8>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
		break;
 80005e8:	bf00      	nop

	}
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	e000e180 	.word	0xe000e180
 80005f8:	e000e184 	.word	0xe000e184

080005fc <MCAL_EXTI_GPIO_Upadte>:
 * Note				- STM32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 					  But LQFP48 Package has only GPIO A, B, Part of C/D as external PINs
 * 					- Mandatory to enable RCC Clock of AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Upadte(EXTI_PinConfig_t *EXTI_Config)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF input -> Floating Input
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000604:	2308      	movs	r3, #8
 8000606:	72bb      	strb	r3, [r7, #10]
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	891b      	ldrh	r3, [r3, #8]
 800060c:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_PORT, &PinCfg);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fa5c 	bl	8000ad6 <MCAL_GPIO_Init>

	//=================================================================

	//2- Set AF MUX to be EXTI line with PORTx
	uint8 index 	= EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4; // 0 -> 3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	b29b      	uxth	r3, r3
 8000626:	73fb      	strb	r3, [r7, #15]
	uint8 position  = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	f003 0303 	and.w	r3, r3, #3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	73bb      	strb	r3, [r7, #14]
	uint8 value		= AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_PORT) & 0xF;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4a5a      	ldr	r2, [pc, #360]	; (80007a8 <MCAL_EXTI_GPIO_Upadte+0x1ac>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d016      	beq.n	8000670 <MCAL_EXTI_GPIO_Upadte+0x74>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4a59      	ldr	r2, [pc, #356]	; (80007ac <MCAL_EXTI_GPIO_Upadte+0x1b0>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d00f      	beq.n	800066c <MCAL_EXTI_GPIO_Upadte+0x70>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	4a57      	ldr	r2, [pc, #348]	; (80007b0 <MCAL_EXTI_GPIO_Upadte+0x1b4>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d008      	beq.n	8000668 <MCAL_EXTI_GPIO_Upadte+0x6c>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	4a56      	ldr	r2, [pc, #344]	; (80007b4 <MCAL_EXTI_GPIO_Upadte+0x1b8>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d101      	bne.n	8000664 <MCAL_EXTI_GPIO_Upadte+0x68>
 8000660:	2303      	movs	r3, #3
 8000662:	e006      	b.n	8000672 <MCAL_EXTI_GPIO_Upadte+0x76>
 8000664:	2300      	movs	r3, #0
 8000666:	e004      	b.n	8000672 <MCAL_EXTI_GPIO_Upadte+0x76>
 8000668:	2302      	movs	r3, #2
 800066a:	e002      	b.n	8000672 <MCAL_EXTI_GPIO_Upadte+0x76>
 800066c:	2301      	movs	r3, #1
 800066e:	e000      	b.n	8000672 <MCAL_EXTI_GPIO_Upadte+0x76>
 8000670:	2300      	movs	r3, #0
 8000672:	737b      	strb	r3, [r7, #13]

	//Clearing & Setting Intended half word
	AFIO->EXTICR[index] &= ~(0xF << position);
 8000674:	4a50      	ldr	r2, [pc, #320]	; (80007b8 <MCAL_EXTI_GPIO_Upadte+0x1bc>)
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3302      	adds	r3, #2
 800067a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	210f      	movs	r1, #15
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	494b      	ldr	r1, [pc, #300]	; (80007b8 <MCAL_EXTI_GPIO_Upadte+0x1bc>)
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	4002      	ands	r2, r0
 8000690:	3302      	adds	r3, #2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[index] |= (value << position);
 8000696:	4a48      	ldr	r2, [pc, #288]	; (80007b8 <MCAL_EXTI_GPIO_Upadte+0x1bc>)
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	3302      	adds	r3, #2
 800069c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a0:	7b79      	ldrb	r1, [r7, #13]
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	4943      	ldr	r1, [pc, #268]	; (80007b8 <MCAL_EXTI_GPIO_Upadte+0x1bc>)
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	4302      	orrs	r2, r0
 80006b0:	3302      	adds	r3, #2
 80006b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//=================================================================

	//3- open Clock for EXTI
	//3- Set Interrupt Trigger
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006b6:	4b41      	ldr	r3, [pc, #260]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	8812      	ldrh	r2, [r2, #0]
 80006be:	4611      	mov	r1, r2
 80006c0:	2201      	movs	r2, #1
 80006c2:	408a      	lsls	r2, r1
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a3c      	ldr	r2, [pc, #240]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 80006ca:	400b      	ands	r3, r1
 80006cc:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006ce:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	8812      	ldrh	r2, [r2, #0]
 80006d6:	4611      	mov	r1, r2
 80006d8:	2201      	movs	r2, #1
 80006da:	408a      	lsls	r2, r1
 80006dc:	43d2      	mvns	r2, r2
 80006de:	4611      	mov	r1, r2
 80006e0:	4a36      	ldr	r2, [pc, #216]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 80006e2:	400b      	ands	r3, r1
 80006e4:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7b1b      	ldrb	r3, [r3, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10b      	bne.n	8000706 <MCAL_EXTI_GPIO_Upadte+0x10a>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	8812      	ldrh	r2, [r2, #0]
 80006f6:	4611      	mov	r1, r2
 80006f8:	2201      	movs	r2, #1
 80006fa:	408a      	lsls	r2, r1
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 8000700:	430b      	orrs	r3, r1
 8000702:	6093      	str	r3, [r2, #8]
 8000704:	e025      	b.n	8000752 <MCAL_EXTI_GPIO_Upadte+0x156>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7b1b      	ldrb	r3, [r3, #12]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d10b      	bne.n	8000726 <MCAL_EXTI_GPIO_Upadte+0x12a>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	8812      	ldrh	r2, [r2, #0]
 8000716:	4611      	mov	r1, r2
 8000718:	2201      	movs	r2, #1
 800071a:	408a      	lsls	r2, r1
 800071c:	4611      	mov	r1, r2
 800071e:	4a27      	ldr	r2, [pc, #156]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 8000720:	430b      	orrs	r3, r1
 8000722:	60d3      	str	r3, [r2, #12]
 8000724:	e015      	b.n	8000752 <MCAL_EXTI_GPIO_Upadte+0x156>
	}
	else // EXTI_Trigger_RisingAndFalling
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	8812      	ldrh	r2, [r2, #0]
 800072e:	4611      	mov	r1, r2
 8000730:	2201      	movs	r2, #1
 8000732:	408a      	lsls	r2, r1
 8000734:	4611      	mov	r1, r2
 8000736:	4a21      	ldr	r2, [pc, #132]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 8000738:	430b      	orrs	r3, r1
 800073a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	4611      	mov	r1, r2
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 800074e:	430b      	orrs	r3, r1
 8000750:	60d3      	str	r3, [r2, #12]
	}

	//=================================================================

	//4-Set Pointer to Interrupt Handler CallBack
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	4619      	mov	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MCAL_EXTI_GPIO_Upadte+0x1c4>)
 800075e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	//=================================================================

	//5- Enable/Disable IRQ (Set NVIC Mask & Set Interrupt Mask)
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7b5b      	ldrb	r3, [r3, #13]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d110      	bne.n	800078c <MCAL_EXTI_GPIO_Upadte+0x190>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	8812      	ldrh	r2, [r2, #0]
 8000772:	4611      	mov	r1, r2
 8000774:	2201      	movs	r2, #1
 8000776:	408a      	lsls	r2, r1
 8000778:	4611      	mov	r1, r2
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 800077c:	430b      	orrs	r3, r1
 800077e:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fe6d 	bl	8000464 <Enable_NVIC>
	else //(EXTI_Config->IRQ_EN == EXTI_IRQ_Disable)
	{
		EXTI->IMR |= (0 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
}
 800078a:	e008      	b.n	800079e <MCAL_EXTI_GPIO_Upadte+0x1a2>
		EXTI->IMR |= (0 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <MCAL_EXTI_GPIO_Upadte+0x1c0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fec9 	bl	8000530 <Disable_NVIC>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40010800 	.word	0x40010800
 80007ac:	40010c00 	.word	0x40010c00
 80007b0:	40011000 	.word	0x40011000
 80007b4:	40011400 	.word	0x40011400
 80007b8:	40010000 	.word	0x40010000
 80007bc:	40010400 	.word	0x40010400
 80007c0:	20000020 	.word	0x20000020

080007c4 <MCAL_EXTI_GPIO_Init>:
 * Note				- STM32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 					  But LQFP48 Package has only GPIO A, B, Part of C/D as external PINs
 * 					- Mandatory to enable RCC Clock of AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Config)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	MCAL_EXTI_GPIO_Upadte(EXTI_Config);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff15 	bl	80005fc <MCAL_EXTI_GPIO_Upadte>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <EXTI0_IRQHandler>:
 *
 * */


void EXTI0_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 0);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <EXTI0_IRQHandler+0x1c>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <EXTI0_IRQHandler+0x1c>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <EXTI0_IRQHandler+0x20>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4798      	blx	r3
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010400 	.word	0x40010400
 80007fc:	20000020 	.word	0x20000020

08000800 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 1);
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <EXTI1_IRQHandler+0x1c>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <EXTI1_IRQHandler+0x1c>)
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <EXTI1_IRQHandler+0x20>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4798      	blx	r3
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010400 	.word	0x40010400
 8000820:	20000020 	.word	0x20000020

08000824 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 2);
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <EXTI2_IRQHandler+0x1c>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <EXTI2_IRQHandler+0x1c>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <EXTI2_IRQHandler+0x20>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	4798      	blx	r3
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40010400 	.word	0x40010400
 8000844:	20000020 	.word	0x20000020

08000848 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 3);
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <EXTI3_IRQHandler+0x1c>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <EXTI3_IRQHandler+0x1c>)
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <EXTI3_IRQHandler+0x20>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	4798      	blx	r3
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010400 	.word	0x40010400
 8000868:	20000020 	.word	0x20000020

0800086c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 4);
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <EXTI4_IRQHandler+0x1c>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <EXTI4_IRQHandler+0x1c>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <EXTI4_IRQHandler+0x20>)
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	4798      	blx	r3
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010400 	.word	0x40010400
 800088c:	20000020 	.word	0x20000020

08000890 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
		 if(EXTI->PR & (1 << 5))	{	EXTI->PR |= (1 << 5)	;GP_IRQ_CallBack[5]();	}
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	f003 0320 	and.w	r3, r3, #32
 800089c:	2b00      	cmp	r3, #0
 800089e:	d009      	beq.n	80008b4 <EXTI9_5_IRQHandler+0x24>
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	4a24      	ldr	r2, [pc, #144]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	6153      	str	r3, [r2, #20]
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <EXTI9_5_IRQHandler+0xac>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4798      	blx	r3
	else if(EXTI->PR & (1 << 6))	{	EXTI->PR |= (1 << 6)	;GP_IRQ_CallBack[6]();	}
	else if(EXTI->PR & (1 << 7))	{	EXTI->PR |= (1 << 7)	;GP_IRQ_CallBack[7]();	}
	else if(EXTI->PR & (1 << 8))	{	EXTI->PR |= (1 << 8)	;GP_IRQ_CallBack[8]();	}
	else if(EXTI->PR & (1 << 9))	{	EXTI->PR |= (1 << 9)	;GP_IRQ_CallBack[9]();	}

}
 80008b2:	e03e      	b.n	8000932 <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 6))	{	EXTI->PR |= (1 << 6)	;GP_IRQ_CallBack[6]();	}
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d009      	beq.n	80008d4 <EXTI9_5_IRQHandler+0x44>
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ca:	6153      	str	r3, [r2, #20]
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <EXTI9_5_IRQHandler+0xac>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4798      	blx	r3
}
 80008d2:	e02e      	b.n	8000932 <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 7))	{	EXTI->PR |= (1 << 7)	;GP_IRQ_CallBack[7]();	}
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d009      	beq.n	80008f4 <EXTI9_5_IRQHandler+0x64>
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ea:	6153      	str	r3, [r2, #20]
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <EXTI9_5_IRQHandler+0xac>)
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	4798      	blx	r3
}
 80008f2:	e01e      	b.n	8000932 <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 8))	{	EXTI->PR |= (1 << 8)	;GP_IRQ_CallBack[8]();	}
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d009      	beq.n	8000914 <EXTI9_5_IRQHandler+0x84>
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 8000906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090a:	6153      	str	r3, [r2, #20]
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <EXTI9_5_IRQHandler+0xac>)
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	4798      	blx	r3
}
 8000912:	e00e      	b.n	8000932 <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 9))	{	EXTI->PR |= (1 << 9)	;GP_IRQ_CallBack[9]();	}
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800091c:	2b00      	cmp	r3, #0
 800091e:	d008      	beq.n	8000932 <EXTI9_5_IRQHandler+0xa2>
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <EXTI9_5_IRQHandler+0xa8>)
 8000926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092a:	6153      	str	r3, [r2, #20]
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <EXTI9_5_IRQHandler+0xac>)
 800092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000930:	4798      	blx	r3
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010400 	.word	0x40010400
 800093c:	20000020 	.word	0x20000020

08000940 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
		 if(EXTI->PR & (1 << 10))	{	EXTI->PR |= (1 << 10)	;GP_IRQ_CallBack[10]();	}
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800094c:	2b00      	cmp	r3, #0
 800094e:	d009      	beq.n	8000964 <EXTI15_10_IRQHandler+0x24>
 8000950:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	4a2c      	ldr	r2, [pc, #176]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095a:	6153      	str	r3, [r2, #20]
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <EXTI15_10_IRQHandler+0xcc>)
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	4798      	blx	r3
	else if(EXTI->PR & (1 << 11))	{	EXTI->PR |= (1 << 11)	;GP_IRQ_CallBack[11]();	}
	else if(EXTI->PR & (1 << 12))	{	EXTI->PR |= (1 << 12)	;GP_IRQ_CallBack[12]();	}
	else if(EXTI->PR & (1 << 13))	{	EXTI->PR |= (1 << 13)	;GP_IRQ_CallBack[13]();	}
	else if(EXTI->PR & (1 << 14))	{	EXTI->PR |= (1 << 14)	;GP_IRQ_CallBack[14]();	}
	else if(EXTI->PR & (1 << 15))	{	EXTI->PR |= (1 << 15)	;GP_IRQ_CallBack[15]();	}
}
 8000962:	e04e      	b.n	8000a02 <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 11))	{	EXTI->PR |= (1 << 11)	;GP_IRQ_CallBack[11]();	}
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800096c:	2b00      	cmp	r3, #0
 800096e:	d009      	beq.n	8000984 <EXTI15_10_IRQHandler+0x44>
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000976:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800097a:	6153      	str	r3, [r2, #20]
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <EXTI15_10_IRQHandler+0xcc>)
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	4798      	blx	r3
}
 8000982:	e03e      	b.n	8000a02 <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 12))	{	EXTI->PR |= (1 << 12)	;GP_IRQ_CallBack[12]();	}
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d009      	beq.n	80009a4 <EXTI15_10_IRQHandler+0x64>
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 8000996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800099a:	6153      	str	r3, [r2, #20]
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <EXTI15_10_IRQHandler+0xcc>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4798      	blx	r3
}
 80009a2:	e02e      	b.n	8000a02 <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 13))	{	EXTI->PR |= (1 << 13)	;GP_IRQ_CallBack[13]();	}
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d009      	beq.n	80009c4 <EXTI15_10_IRQHandler+0x84>
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ba:	6153      	str	r3, [r2, #20]
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <EXTI15_10_IRQHandler+0xcc>)
 80009be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c0:	4798      	blx	r3
}
 80009c2:	e01e      	b.n	8000a02 <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 14))	{	EXTI->PR |= (1 << 14)	;GP_IRQ_CallBack[14]();	}
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d009      	beq.n	80009e4 <EXTI15_10_IRQHandler+0xa4>
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	6153      	str	r3, [r2, #20]
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <EXTI15_10_IRQHandler+0xcc>)
 80009de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e0:	4798      	blx	r3
}
 80009e2:	e00e      	b.n	8000a02 <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 15))	{	EXTI->PR |= (1 << 15)	;GP_IRQ_CallBack[15]();	}
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <EXTI15_10_IRQHandler+0xc2>
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <EXTI15_10_IRQHandler+0xc8>)
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fa:	6153      	str	r3, [r2, #20]
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <EXTI15_10_IRQHandler+0xcc>)
 80009fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a00:	4798      	blx	r3
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010400 	.word	0x40010400
 8000a0c:	20000020 	.word	0x20000020

08000a10 <Get_CRLH_Position>:
 *      Author: Mina Fathy
 */
#include "STM32_F103C6_GPIO_drivers.h"

uint8 Get_CRLH_Position(uint16 Pin_Number)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
	switch (Pin_Number)
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	2b80      	cmp	r3, #128	; 0x80
 8000a1e:	d042      	beq.n	8000aa6 <Get_CRLH_Position+0x96>
 8000a20:	2b80      	cmp	r3, #128	; 0x80
 8000a22:	dc11      	bgt.n	8000a48 <Get_CRLH_Position+0x38>
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d036      	beq.n	8000a96 <Get_CRLH_Position+0x86>
 8000a28:	2b08      	cmp	r3, #8
 8000a2a:	dc06      	bgt.n	8000a3a <Get_CRLH_Position+0x2a>
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d02e      	beq.n	8000a8e <Get_CRLH_Position+0x7e>
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d02e      	beq.n	8000a92 <Get_CRLH_Position+0x82>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d028      	beq.n	8000a8a <Get_CRLH_Position+0x7a>
 8000a38:	e047      	b.n	8000aca <Get_CRLH_Position+0xba>
 8000a3a:	2b20      	cmp	r3, #32
 8000a3c:	d02f      	beq.n	8000a9e <Get_CRLH_Position+0x8e>
 8000a3e:	2b40      	cmp	r3, #64	; 0x40
 8000a40:	d02f      	beq.n	8000aa2 <Get_CRLH_Position+0x92>
 8000a42:	2b10      	cmp	r3, #16
 8000a44:	d029      	beq.n	8000a9a <Get_CRLH_Position+0x8a>
 8000a46:	e040      	b.n	8000aca <Get_CRLH_Position+0xba>
 8000a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a4c:	d033      	beq.n	8000ab6 <Get_CRLH_Position+0xa6>
 8000a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a52:	dc09      	bgt.n	8000a68 <Get_CRLH_Position+0x58>
 8000a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a58:	d029      	beq.n	8000aae <Get_CRLH_Position+0x9e>
 8000a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a5e:	d028      	beq.n	8000ab2 <Get_CRLH_Position+0xa2>
 8000a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a64:	d021      	beq.n	8000aaa <Get_CRLH_Position+0x9a>
 8000a66:	e030      	b.n	8000aca <Get_CRLH_Position+0xba>
 8000a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a6c:	d027      	beq.n	8000abe <Get_CRLH_Position+0xae>
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a72:	dc03      	bgt.n	8000a7c <Get_CRLH_Position+0x6c>
 8000a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a78:	d01f      	beq.n	8000aba <Get_CRLH_Position+0xaa>
 8000a7a:	e026      	b.n	8000aca <Get_CRLH_Position+0xba>
 8000a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a80:	d01f      	beq.n	8000ac2 <Get_CRLH_Position+0xb2>
 8000a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a86:	d01e      	beq.n	8000ac6 <Get_CRLH_Position+0xb6>
 8000a88:	e01f      	b.n	8000aca <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:  return 0;  break;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e01e      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_1:  return 4;  break;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e01c      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_2:  return 8;  break;
 8000a92:	2308      	movs	r3, #8
 8000a94:	e01a      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_3:  return 12; break;
 8000a96:	230c      	movs	r3, #12
 8000a98:	e018      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_4:  return 16; break;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	e016      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_5:  return 20; break;
 8000a9e:	2314      	movs	r3, #20
 8000aa0:	e014      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_6:  return 24; break;
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	e012      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_7:  return 28; break;
 8000aa6:	231c      	movs	r3, #28
 8000aa8:	e010      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_8:  return 0;  break;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e00e      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_9:  return 4;  break;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	e00c      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_10: return 8;  break;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	e00a      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_11: return 12; break;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	e008      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_12: return 16; break;
 8000aba:	2310      	movs	r3, #16
 8000abc:	e006      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_13: return 20; break;
 8000abe:	2314      	movs	r3, #20
 8000ac0:	e004      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_14: return 24; break;
 8000ac2:	2318      	movs	r3, #24
 8000ac4:	e002      	b.n	8000acc <Get_CRLH_Position+0xbc>
	case GPIO_PIN_15: return 28; break;
 8000ac6:	231c      	movs	r3, #28
 8000ac8:	e000      	b.n	8000acc <Get_CRLH_Position+0xbc>
	default:		  return 0;  break;
 8000aca:	2300      	movs	r3, #0
	}
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <MCAL_GPIO_Init>:
 * @retval			- None
 * Note				- STM32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 					  But LQFP48 Package has only GPIO A, B, Part of C/D as external PINs
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000ad6:	b590      	push	{r4, r7, lr}
 8000ad8:	b085      	sub	sp, #20
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
	//	Port configuration register low (GPIOx_CRL) Configure pins 0 >> 7
	//	Port configuration register High (GPIOx_CRL) Configure pins 8 >> 15
	vuint32_t *ConfigRegister = NULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
	vuint8_t PIN_CNF_MODE;

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	2bff      	cmp	r3, #255	; 0xff
 8000aea:	d801      	bhi.n	8000af0 <MCAL_GPIO_Init+0x1a>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	e001      	b.n	8000af4 <MCAL_GPIO_Init+0x1e>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3304      	adds	r3, #4
 8000af4:	60fb      	str	r3, [r7, #12]

	//clear CNFy[1:0] MODEy[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff88 	bl	8000a10 <Get_CRLH_Position>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	230f      	movs	r3, #15
 8000b06:	4093      	lsls	r3, r2
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	601a      	str	r2, [r3, #0]

	//If Pin is Output
	if( (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) )
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	789b      	ldrb	r3, [r3, #2]
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d00b      	beq.n	8000b34 <MCAL_GPIO_Init+0x5e>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	789b      	ldrb	r3, [r3, #2]
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	d007      	beq.n	8000b34 <MCAL_GPIO_Init+0x5e>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	2b06      	cmp	r3, #6
 8000b2a:	d003      	beq.n	8000b34 <MCAL_GPIO_Init+0x5e>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	789b      	ldrb	r3, [r3, #2]
 8000b30:	2b07      	cmp	r3, #7
 8000b32:	d10f      	bne.n	8000b54 <MCAL_GPIO_Init+0x7e>
	{
		//Set CNFy[1:0] MODEy[1:0]
		PIN_CNF_MODE = ( (((PinConfig->GPIO_Mode - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	3b04      	subs	r3, #4
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	b25a      	sxtb	r2, r3
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	78db      	ldrb	r3, [r3, #3]
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	72fb      	strb	r3, [r7, #11]
 8000b52:	e032      	b.n	8000bba <MCAL_GPIO_Init+0xe4>

	//If Pin is Input
	else // Mode = 00: input Mode (reset value)
	{
		//Set CNFy[1:0] MODEy[1:0]
		if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_Mode == GPIO_MODE_Analog))
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	789b      	ldrb	r3, [r3, #2]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d003      	beq.n	8000b64 <MCAL_GPIO_Init+0x8e>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d108      	bne.n	8000b76 <MCAL_GPIO_Init+0xa0>
		{
			PIN_CNF_MODE = (((PinConfig->GPIO_Mode << 2) | 0x0) & 0x0F);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	789b      	ldrb	r3, [r3, #2]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	72fb      	strb	r3, [r7, #11]
 8000b74:	e021      	b.n	8000bba <MCAL_GPIO_Init+0xe4>
		}
		else if(PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT) //Note: AF_INPUT is treated as Floating
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d102      	bne.n	8000b84 <MCAL_GPIO_Init+0xae>
		{
			PIN_CNF_MODE = (((GPIO_MODE_INPUT_FLO << 2) | 0x0) & 0x0F);
 8000b7e:	2304      	movs	r3, #4
 8000b80:	72fb      	strb	r3, [r7, #11]
 8000b82:	e01a      	b.n	8000bba <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD Input
		{
			PIN_CNF_MODE = (((PinConfig->GPIO_Mode << 2) | 0x0) & 0x0F);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	72fb      	strb	r3, [r7, #11]

			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	789b      	ldrb	r3, [r3, #2]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d10a      	bne.n	8000bb2 <MCAL_GPIO_Init+0xdc>
			{
				//Table 20. Port bit configuration table PxODR -> 1
				GPIOx->ODR |= (1 << PinConfig->GPIO_PinNumber);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	8812      	ldrh	r2, [r2, #0]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	408a      	lsls	r2, r1
 8000baa:	431a      	orrs	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	e003      	b.n	8000bba <MCAL_GPIO_Init+0xe4>
			}
			else //PULL down Input
			{
				//Table 20. Port bit configuration table PxODR -> 0
				GPIOx->ODR |= (0 << PinConfig->GPIO_PinNumber);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//Write on CLR or CRH
	(*ConfigRegister) |= ( PIN_CNF_MODE << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000bba:	7afb      	ldrb	r3, [r7, #11]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff23 	bl	8000a10 <Get_CRLH_Position>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	fa04 f203 	lsl.w	r2, r4, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	601a      	str	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}

08000be2 <MCAL_GPIO_WritePin>:
 * @param [in]		- Value: the value to write on Pin
 * @retval			- None
 * Note				- None
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	807b      	strh	r3, [r7, #2]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET)
 8000bf2:	787b      	ldrb	r3, [r7, #1]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <MCAL_GPIO_WritePin+0x1e>
			BRy: Port x Reset bit y (y= 0 .. 15)
		 	These bits are write-only and can be accessed in Word mode only.
			0: No action on the corresponding ODRx bit
		 	1: Reset the corresponding ODRx bit
		 	Note: If both BSx and BRx are set, BSx has priority.*/
		GPIOx->BSRR = (uint32)PinNumber;
 8000bf8:	887a      	ldrh	r2, [r7, #2]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	611a      	str	r2, [r3, #16]
		 	These bits are write-only and can be accessed in Word mode only.
			0: No action on the corresponding ODRx bit
		 	1: Reset the corresponding ODRx bit*/
		GPIOx->BRR = (uint32)PinNumber;
	}
}
 8000bfe:	e002      	b.n	8000c06 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32)PinNumber;
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	615a      	str	r2, [r3, #20]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <MCAL_GPIO_WritePort>:
 * @param [in]		- Value: the value to write on Pin
 * @retval			- None
 * Note				- None
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32)Value;
 8000c1c:	887a      	ldrh	r2, [r7, #2]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60da      	str	r2, [r3, #12]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <wait>:
extern char Seven_Seg_DISPLAY[10];
uint8 IRQ_Flag;


void wait(int x)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < x; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e00b      	b.n	8000c52 <wait+0x26>
		for (j = 0; j < 255; j++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	e002      	b.n	8000c46 <wait+0x1a>
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3301      	adds	r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2bfe      	cmp	r3, #254	; 0xfe
 8000c4a:	d9f9      	bls.n	8000c40 <wait+0x14>
	for (i = 0; i < x; i++)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3ef      	bcc.n	8000c3a <wait+0xe>
			;
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <EXTI9_CallBack>:

void EXTI9_CallBack(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <EXTI9_CallBack+0x1c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 has Happped");
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <EXTI9_CallBack+0x20>)
 8000c70:	f7ff fba4 	bl	80003bc <LCD_WRITE_STRING>
	wait(500);
 8000c74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c78:	f7ff ffd8 	bl	8000c2c <wait>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000060 	.word	0x20000060
 8000c84:	08000db8 	.word	0x08000db8

08000c88 <main>:

int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
	//Enable CLokc
	RCC_GPIOA_CLK_EN();
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <main+0x6c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <main+0x6c>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <main+0x6c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <main+0x6c>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <main+0x6c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <main+0x6c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000cb2:	f7ff fa7b 	bl	80001ac <LCD_INIT>
	LCD_clear_screen();
 8000cb6:	f7ff fa71 	bl	800019c <LCD_clear_screen>

	//Initialize Interrupt
	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <main+0x70>)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_CallBack;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <main+0x74>)
 8000cca:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd76 	bl	80007c4 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <main+0x78>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(IRQ_Flag)
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <main+0x78>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0fb      	beq.n	8000cde <main+0x56>
		{
			LCD_clear_screen();
 8000ce6:	f7ff fa59 	bl	800019c <LCD_clear_screen>
			IRQ_Flag = 0;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <main+0x78>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000cf0:	e7f5      	b.n	8000cde <main+0x56>
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	08000dd0 	.word	0x08000dd0
 8000cfc:	08000c65 	.word	0x08000c65
 8000d00:	20000060 	.word	0x20000060

08000d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d06:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <LoopForever+0xe>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	; (8000d50 <LoopForever+0x16>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d32:	f000 f811 	bl	8000d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d36:	f7ff ffa7 	bl	8000c88 <main>

08000d3a <LoopForever>:

LoopForever:
    b LoopForever
 8000d3a:	e7fe      	b.n	8000d3a <LoopForever>
  ldr   r0, =_estack
 8000d3c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d48:	08000de4 	.word	0x08000de4
  ldr r2, =_sbss
 8000d4c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d50:	20000064 	.word	0x20000064

08000d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC1_2_IRQHandler>
	...

08000d58 <__libc_init_array>:
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	4e0c      	ldr	r6, [pc, #48]	; (8000d90 <__libc_init_array+0x38>)
 8000d5e:	4c0d      	ldr	r4, [pc, #52]	; (8000d94 <__libc_init_array+0x3c>)
 8000d60:	1ba4      	subs	r4, r4, r6
 8000d62:	10a4      	asrs	r4, r4, #2
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	d109      	bne.n	8000d7c <__libc_init_array+0x24>
 8000d68:	f000 f81a 	bl	8000da0 <_init>
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	4e0a      	ldr	r6, [pc, #40]	; (8000d98 <__libc_init_array+0x40>)
 8000d70:	4c0a      	ldr	r4, [pc, #40]	; (8000d9c <__libc_init_array+0x44>)
 8000d72:	1ba4      	subs	r4, r4, r6
 8000d74:	10a4      	asrs	r4, r4, #2
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d105      	bne.n	8000d86 <__libc_init_array+0x2e>
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d80:	4798      	blx	r3
 8000d82:	3501      	adds	r5, #1
 8000d84:	e7ee      	b.n	8000d64 <__libc_init_array+0xc>
 8000d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d8a:	4798      	blx	r3
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	e7f2      	b.n	8000d76 <__libc_init_array+0x1e>
 8000d90:	08000ddc 	.word	0x08000ddc
 8000d94:	08000ddc 	.word	0x08000ddc
 8000d98:	08000ddc 	.word	0x08000ddc
 8000d9c:	08000de0 	.word	0x08000de0

08000da0 <_init>:
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	bf00      	nop
 8000da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da6:	bc08      	pop	{r3}
 8000da8:	469e      	mov	lr, r3
 8000daa:	4770      	bx	lr

08000dac <_fini>:
 8000dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dae:	bf00      	nop
 8000db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db2:	bc08      	pop	{r3}
 8000db4:	469e      	mov	lr, r3
 8000db6:	4770      	bx	lr
