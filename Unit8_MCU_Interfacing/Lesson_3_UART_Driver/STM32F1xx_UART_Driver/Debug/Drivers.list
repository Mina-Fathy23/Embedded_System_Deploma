
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000df8  08000df8  00010df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e10  08000e10  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000e10  08000e10  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e10  08000e10  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000064  08000e7c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08000e7c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d21  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e27  00000000  00000000  00025dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001194  00000000  00000000  00026bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002c8  00000000  00000000  00027d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  00028038  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001c4e  00000000  00000000  00028288  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000030a7  00000000  00000000  00029ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c42e  00000000  00000000  0002cf7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000393ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a24  00000000  00000000  00039428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08000de0 	.word	0x08000de0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08000de0 	.word	0x08000de0

08000170 <LCD_KICK>:
 * @retval			- None
 * Note				- None
 */
void LCD_KICK(void)

{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//ClearBit(LCD_CTRL, EN_Switch);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017a:	4807      	ldr	r0, [pc, #28]	; (8000198 <LCD_KICK+0x28>)
 800017c:	f000 faf9 	bl	8000772 <MCAL_GPIO_WritePin>
	wait(20); //Delay Between Writing Each Letter
 8000180:	2014      	movs	r0, #20
 8000182:	f000 fe15 	bl	8000db0 <wait>
	//SetBit(LCD_CTRL, EN_Switch);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018c:	4802      	ldr	r0, [pc, #8]	; (8000198 <LCD_KICK+0x28>)
 800018e:	f000 faf0 	bl	8000772 <MCAL_GPIO_WritePin>

}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40010800 	.word	0x40010800

0800019c <LCD_clear_screen>:
 * @param [in]		- None
 * @retval			- None
 * Note				- None
 */
void LCD_clear_screen(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80001a0:	2001      	movs	r0, #1
 80001a2:	f000 f8c3 	bl	800032c <LCD_WRITE_COMMAND>
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <LCD_INIT>:
 * @param [in]		- None
 * @retval			- None
 * Note				- None
 */
void LCD_INIT()
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	wait(20);
 80001b0:	2014      	movs	r0, #20
 80001b2:	f000 fdfd 	bl	8000db0 <wait>
	//Write Mode
	//	LCD_DataDir_CTRL |= (1 << EN_Switch) | (1 << RW_SWITCH) | (1 << RS_SWITCH);
	//	LCD_CTRL &= ~((1 << EN_Switch) | (1 << RW_SWITCH) | (1 << RS_SWITCH));

	//EN_Switch, RW_SWITCH, RS_SWITCH Set as Output Push-Pull
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001b6:	4b5b      	ldr	r3, [pc, #364]	; (8000324 <LCD_INIT+0x178>)
 80001b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001bc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001be:	4b59      	ldr	r3, [pc, #356]	; (8000324 <LCD_INIT+0x178>)
 80001c0:	2204      	movs	r2, #4
 80001c2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80001c4:	4b57      	ldr	r3, [pc, #348]	; (8000324 <LCD_INIT+0x178>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001ca:	4956      	ldr	r1, [pc, #344]	; (8000324 <LCD_INIT+0x178>)
 80001cc:	4856      	ldr	r0, [pc, #344]	; (8000328 <LCD_INIT+0x17c>)
 80001ce:	f000 fa4e 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001d2:	4b54      	ldr	r3, [pc, #336]	; (8000324 <LCD_INIT+0x178>)
 80001d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001d8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001da:	4b52      	ldr	r3, [pc, #328]	; (8000324 <LCD_INIT+0x178>)
 80001dc:	2204      	movs	r2, #4
 80001de:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80001e0:	4b50      	ldr	r3, [pc, #320]	; (8000324 <LCD_INIT+0x178>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001e6:	494f      	ldr	r1, [pc, #316]	; (8000324 <LCD_INIT+0x178>)
 80001e8:	484f      	ldr	r0, [pc, #316]	; (8000328 <LCD_INIT+0x17c>)
 80001ea:	f000 fa40 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001ee:	4b4d      	ldr	r3, [pc, #308]	; (8000324 <LCD_INIT+0x178>)
 80001f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001f4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001f6:	4b4b      	ldr	r3, [pc, #300]	; (8000324 <LCD_INIT+0x178>)
 80001f8:	2204      	movs	r2, #4
 80001fa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80001fc:	4b49      	ldr	r3, [pc, #292]	; (8000324 <LCD_INIT+0x178>)
 80001fe:	2201      	movs	r2, #1
 8000200:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000202:	4948      	ldr	r1, [pc, #288]	; (8000324 <LCD_INIT+0x178>)
 8000204:	4848      	ldr	r0, [pc, #288]	; (8000328 <LCD_INIT+0x17c>)
 8000206:	f000 fa32 	bl	800066e <MCAL_GPIO_Init>

	//=====================================================
	//Set PIN 0 >> 7 Set as Output Push-Pull
	//LCD_DataDir_PORT = 0xFF;
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800020a:	4b46      	ldr	r3, [pc, #280]	; (8000324 <LCD_INIT+0x178>)
 800020c:	2201      	movs	r2, #1
 800020e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000210:	4b44      	ldr	r3, [pc, #272]	; (8000324 <LCD_INIT+0x178>)
 8000212:	2204      	movs	r2, #4
 8000214:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000216:	4b43      	ldr	r3, [pc, #268]	; (8000324 <LCD_INIT+0x178>)
 8000218:	2201      	movs	r2, #1
 800021a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800021c:	4941      	ldr	r1, [pc, #260]	; (8000324 <LCD_INIT+0x178>)
 800021e:	4842      	ldr	r0, [pc, #264]	; (8000328 <LCD_INIT+0x17c>)
 8000220:	f000 fa25 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000224:	4b3f      	ldr	r3, [pc, #252]	; (8000324 <LCD_INIT+0x178>)
 8000226:	2202      	movs	r2, #2
 8000228:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800022a:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <LCD_INIT+0x178>)
 800022c:	2204      	movs	r2, #4
 800022e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000230:	4b3c      	ldr	r3, [pc, #240]	; (8000324 <LCD_INIT+0x178>)
 8000232:	2201      	movs	r2, #1
 8000234:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000236:	493b      	ldr	r1, [pc, #236]	; (8000324 <LCD_INIT+0x178>)
 8000238:	483b      	ldr	r0, [pc, #236]	; (8000328 <LCD_INIT+0x17c>)
 800023a:	f000 fa18 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800023e:	4b39      	ldr	r3, [pc, #228]	; (8000324 <LCD_INIT+0x178>)
 8000240:	2204      	movs	r2, #4
 8000242:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	4b37      	ldr	r3, [pc, #220]	; (8000324 <LCD_INIT+0x178>)
 8000246:	2204      	movs	r2, #4
 8000248:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 800024a:	4b36      	ldr	r3, [pc, #216]	; (8000324 <LCD_INIT+0x178>)
 800024c:	2201      	movs	r2, #1
 800024e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000250:	4934      	ldr	r1, [pc, #208]	; (8000324 <LCD_INIT+0x178>)
 8000252:	4835      	ldr	r0, [pc, #212]	; (8000328 <LCD_INIT+0x17c>)
 8000254:	f000 fa0b 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000258:	4b32      	ldr	r3, [pc, #200]	; (8000324 <LCD_INIT+0x178>)
 800025a:	2208      	movs	r2, #8
 800025c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800025e:	4b31      	ldr	r3, [pc, #196]	; (8000324 <LCD_INIT+0x178>)
 8000260:	2204      	movs	r2, #4
 8000262:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000264:	4b2f      	ldr	r3, [pc, #188]	; (8000324 <LCD_INIT+0x178>)
 8000266:	2201      	movs	r2, #1
 8000268:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800026a:	492e      	ldr	r1, [pc, #184]	; (8000324 <LCD_INIT+0x178>)
 800026c:	482e      	ldr	r0, [pc, #184]	; (8000328 <LCD_INIT+0x17c>)
 800026e:	f000 f9fe 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000272:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <LCD_INIT+0x178>)
 8000274:	2210      	movs	r2, #16
 8000276:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000278:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <LCD_INIT+0x178>)
 800027a:	2204      	movs	r2, #4
 800027c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 800027e:	4b29      	ldr	r3, [pc, #164]	; (8000324 <LCD_INIT+0x178>)
 8000280:	2201      	movs	r2, #1
 8000282:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000284:	4927      	ldr	r1, [pc, #156]	; (8000324 <LCD_INIT+0x178>)
 8000286:	4828      	ldr	r0, [pc, #160]	; (8000328 <LCD_INIT+0x17c>)
 8000288:	f000 f9f1 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800028c:	4b25      	ldr	r3, [pc, #148]	; (8000324 <LCD_INIT+0x178>)
 800028e:	2220      	movs	r2, #32
 8000290:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000292:	4b24      	ldr	r3, [pc, #144]	; (8000324 <LCD_INIT+0x178>)
 8000294:	2204      	movs	r2, #4
 8000296:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <LCD_INIT+0x178>)
 800029a:	2201      	movs	r2, #1
 800029c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800029e:	4921      	ldr	r1, [pc, #132]	; (8000324 <LCD_INIT+0x178>)
 80002a0:	4821      	ldr	r0, [pc, #132]	; (8000328 <LCD_INIT+0x17c>)
 80002a2:	f000 f9e4 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80002a6:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <LCD_INIT+0x178>)
 80002a8:	2240      	movs	r2, #64	; 0x40
 80002aa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <LCD_INIT+0x178>)
 80002ae:	2204      	movs	r2, #4
 80002b0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <LCD_INIT+0x178>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002b8:	491a      	ldr	r1, [pc, #104]	; (8000324 <LCD_INIT+0x178>)
 80002ba:	481b      	ldr	r0, [pc, #108]	; (8000328 <LCD_INIT+0x17c>)
 80002bc:	f000 f9d7 	bl	800066e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <LCD_INIT+0x178>)
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	4b17      	ldr	r3, [pc, #92]	; (8000324 <LCD_INIT+0x178>)
 80002c8:	2204      	movs	r2, #4
 80002ca:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <LCD_INIT+0x178>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002d2:	4914      	ldr	r1, [pc, #80]	; (8000324 <LCD_INIT+0x178>)
 80002d4:	4814      	ldr	r0, [pc, #80]	; (8000328 <LCD_INIT+0x17c>)
 80002d6:	f000 f9ca 	bl	800066e <MCAL_GPIO_Init>

	//============================================================

	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e0:	4811      	ldr	r0, [pc, #68]	; (8000328 <LCD_INIT+0x17c>)
 80002e2:	f000 fa46 	bl	8000772 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <LCD_INIT+0x17c>)
 80002ee:	f000 fa40 	bl	8000772 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <LCD_INIT+0x17c>)
 80002fa:	f000 fa3a 	bl	8000772 <MCAL_GPIO_WritePin>

	//=======================================================
	wait(15);
 80002fe:	200f      	movs	r0, #15
 8000300:	f000 fd56 	bl	8000db0 <wait>
	LCD_clear_screen();
 8000304:	f7ff ff4a 	bl	800019c <LCD_clear_screen>

#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000308:	2038      	movs	r0, #56	; 0x38
 800030a:	f000 f80f 	bl	800032c <LCD_WRITE_COMMAND>
#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02); //command to tell LCD we are using D4 -> D7
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800030e:	2006      	movs	r0, #6
 8000310:	f000 f80c 	bl	800032c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	f000 f809 	bl	800032c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800031a:	200f      	movs	r0, #15
 800031c:	f000 f806 	bl	800032c <LCD_WRITE_COMMAND>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000008c 	.word	0x2000008c
 8000328:	40010800 	.word	0x40010800

0800032c <LCD_WRITE_COMMAND>:
 * @param [in]		- command: Specifies the Command code according to @ref LCD_define
 * @retval			- None
 * Note				- None
 */
void LCD_WRITE_COMMAND(vuint8_t command)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
#ifdef EIGHT_BIT_MODE
	//	LCD_CTRL  = command;
	//	LCD_CTRL &= ~((1 << RW_SWITCH) | (1 << RS_SWITCH));
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	b29b      	uxth	r3, r3
 800033c:	4619      	mov	r1, r3
 800033e:	480c      	ldr	r0, [pc, #48]	; (8000370 <LCD_WRITE_COMMAND+0x44>)
 8000340:	f000 fa2e 	bl	80007a0 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <LCD_WRITE_COMMAND+0x44>)
 800034c:	f000 fa11 	bl	8000772 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <LCD_WRITE_COMMAND+0x44>)
 8000358:	f000 fa0b 	bl	8000772 <MCAL_GPIO_WritePin>

	wait(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f000 fd27 	bl	8000db0 <wait>
	LCD_KICK();
 8000362:	f7ff ff05 	bl	8000170 <LCD_KICK>
	LCD_CTRL  = (LCD_CTRL  & 0x0F) | (command << DATA_shift);
	LCD_CTRL &= ~((1 << RW_SWITCH) | (1 << RS_SWITCH));
	wait(10);
	LCD_KICK();
#endif
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010800 	.word	0x40010800

08000374 <EXTI0_IRQHandler>:
 *
 * */


void EXTI0_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 0);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <EXTI0_IRQHandler+0x1c>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <EXTI0_IRQHandler+0x1c>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <EXTI0_IRQHandler+0x20>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4798      	blx	r3
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010400 	.word	0x40010400
 8000394:	20000090 	.word	0x20000090

08000398 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 1);
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <EXTI1_IRQHandler+0x1c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <EXTI1_IRQHandler+0x1c>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <EXTI1_IRQHandler+0x20>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	4798      	blx	r3
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010400 	.word	0x40010400
 80003b8:	20000090 	.word	0x20000090

080003bc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 2);
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <EXTI2_IRQHandler+0x1c>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <EXTI2_IRQHandler+0x1c>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <EXTI2_IRQHandler+0x20>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4798      	blx	r3
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010400 	.word	0x40010400
 80003dc:	20000090 	.word	0x20000090

080003e0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 3);
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <EXTI3_IRQHandler+0x1c>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <EXTI3_IRQHandler+0x1c>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <EXTI3_IRQHandler+0x20>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4798      	blx	r3
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40010400 	.word	0x40010400
 8000400:	20000090 	.word	0x20000090

08000404 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= (1 << 4);
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <EXTI4_IRQHandler+0x1c>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <EXTI4_IRQHandler+0x1c>)
 800040e:	f043 0310 	orr.w	r3, r3, #16
 8000412:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <EXTI4_IRQHandler+0x20>)
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4798      	blx	r3
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40010400 	.word	0x40010400
 8000424:	20000090 	.word	0x20000090

08000428 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
		 if(EXTI->PR & (1 << 5))	{	EXTI->PR |= (1 << 5)	;GP_IRQ_CallBack[5]();	}
 800042c:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f003 0320 	and.w	r3, r3, #32
 8000434:	2b00      	cmp	r3, #0
 8000436:	d009      	beq.n	800044c <EXTI9_5_IRQHandler+0x24>
 8000438:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a24      	ldr	r2, [pc, #144]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6153      	str	r3, [r2, #20]
 8000444:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <EXTI9_5_IRQHandler+0xac>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4798      	blx	r3
	else if(EXTI->PR & (1 << 6))	{	EXTI->PR |= (1 << 6)	;GP_IRQ_CallBack[6]();	}
	else if(EXTI->PR & (1 << 7))	{	EXTI->PR |= (1 << 7)	;GP_IRQ_CallBack[7]();	}
	else if(EXTI->PR & (1 << 8))	{	EXTI->PR |= (1 << 8)	;GP_IRQ_CallBack[8]();	}
	else if(EXTI->PR & (1 << 9))	{	EXTI->PR |= (1 << 9)	;GP_IRQ_CallBack[9]();	}

}
 800044a:	e03e      	b.n	80004ca <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 6))	{	EXTI->PR |= (1 << 6)	;GP_IRQ_CallBack[6]();	}
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000454:	2b00      	cmp	r3, #0
 8000456:	d009      	beq.n	800046c <EXTI9_5_IRQHandler+0x44>
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800045e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000462:	6153      	str	r3, [r2, #20]
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <EXTI9_5_IRQHandler+0xac>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4798      	blx	r3
}
 800046a:	e02e      	b.n	80004ca <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 7))	{	EXTI->PR |= (1 << 7)	;GP_IRQ_CallBack[7]();	}
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000474:	2b00      	cmp	r3, #0
 8000476:	d009      	beq.n	800048c <EXTI9_5_IRQHandler+0x64>
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800047e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000482:	6153      	str	r3, [r2, #20]
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <EXTI9_5_IRQHandler+0xac>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4798      	blx	r3
}
 800048a:	e01e      	b.n	80004ca <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 8))	{	EXTI->PR |= (1 << 8)	;GP_IRQ_CallBack[8]();	}
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000494:	2b00      	cmp	r3, #0
 8000496:	d009      	beq.n	80004ac <EXTI9_5_IRQHandler+0x84>
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 800049e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a2:	6153      	str	r3, [r2, #20]
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <EXTI9_5_IRQHandler+0xac>)
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	4798      	blx	r3
}
 80004aa:	e00e      	b.n	80004ca <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & (1 << 9))	{	EXTI->PR |= (1 << 9)	;GP_IRQ_CallBack[9]();	}
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d008      	beq.n	80004ca <EXTI9_5_IRQHandler+0xa2>
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <EXTI9_5_IRQHandler+0xa8>)
 80004be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004c2:	6153      	str	r3, [r2, #20]
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <EXTI9_5_IRQHandler+0xac>)
 80004c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c8:	4798      	blx	r3
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010400 	.word	0x40010400
 80004d4:	20000090 	.word	0x20000090

080004d8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
		 if(EXTI->PR & (1 << 10))	{	EXTI->PR |= (1 << 10)	;GP_IRQ_CallBack[10]();	}
 80004dc:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d009      	beq.n	80004fc <EXTI15_10_IRQHandler+0x24>
 80004e8:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6153      	str	r3, [r2, #20]
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <EXTI15_10_IRQHandler+0xcc>)
 80004f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f8:	4798      	blx	r3
	else if(EXTI->PR & (1 << 11))	{	EXTI->PR |= (1 << 11)	;GP_IRQ_CallBack[11]();	}
	else if(EXTI->PR & (1 << 12))	{	EXTI->PR |= (1 << 12)	;GP_IRQ_CallBack[12]();	}
	else if(EXTI->PR & (1 << 13))	{	EXTI->PR |= (1 << 13)	;GP_IRQ_CallBack[13]();	}
	else if(EXTI->PR & (1 << 14))	{	EXTI->PR |= (1 << 14)	;GP_IRQ_CallBack[14]();	}
	else if(EXTI->PR & (1 << 15))	{	EXTI->PR |= (1 << 15)	;GP_IRQ_CallBack[15]();	}
}
 80004fa:	e04e      	b.n	800059a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 11))	{	EXTI->PR |= (1 << 11)	;GP_IRQ_CallBack[11]();	}
 80004fc:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000504:	2b00      	cmp	r3, #0
 8000506:	d009      	beq.n	800051c <EXTI15_10_IRQHandler+0x44>
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800050e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000512:	6153      	str	r3, [r2, #20]
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <EXTI15_10_IRQHandler+0xcc>)
 8000516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000518:	4798      	blx	r3
}
 800051a:	e03e      	b.n	800059a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 12))	{	EXTI->PR |= (1 << 12)	;GP_IRQ_CallBack[12]();	}
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d009      	beq.n	800053c <EXTI15_10_IRQHandler+0x64>
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800052e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000532:	6153      	str	r3, [r2, #20]
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <EXTI15_10_IRQHandler+0xcc>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	4798      	blx	r3
}
 800053a:	e02e      	b.n	800059a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 13))	{	EXTI->PR |= (1 << 13)	;GP_IRQ_CallBack[13]();	}
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d009      	beq.n	800055c <EXTI15_10_IRQHandler+0x84>
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800054e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000552:	6153      	str	r3, [r2, #20]
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <EXTI15_10_IRQHandler+0xcc>)
 8000556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000558:	4798      	blx	r3
}
 800055a:	e01e      	b.n	800059a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 14))	{	EXTI->PR |= (1 << 14)	;GP_IRQ_CallBack[14]();	}
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	2b00      	cmp	r3, #0
 8000566:	d009      	beq.n	800057c <EXTI15_10_IRQHandler+0xa4>
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6153      	str	r3, [r2, #20]
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <EXTI15_10_IRQHandler+0xcc>)
 8000576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000578:	4798      	blx	r3
}
 800057a:	e00e      	b.n	800059a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & (1 << 15))	{	EXTI->PR |= (1 << 15)	;GP_IRQ_CallBack[15]();	}
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000584:	2b00      	cmp	r3, #0
 8000586:	d008      	beq.n	800059a <EXTI15_10_IRQHandler+0xc2>
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <EXTI15_10_IRQHandler+0xc8>)
 800058e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000592:	6153      	str	r3, [r2, #20]
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <EXTI15_10_IRQHandler+0xcc>)
 8000596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000598:	4798      	blx	r3
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40010400 	.word	0x40010400
 80005a4:	20000090 	.word	0x20000090

080005a8 <Get_CRLH_Position>:
 *      Author: Mina Fathy
 */
#include "STM32_F103C6_GPIO_drivers.h"

uint8 Get_CRLH_Position(uint16 Pin_Number)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
	switch (Pin_Number)
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	2b80      	cmp	r3, #128	; 0x80
 80005b6:	d042      	beq.n	800063e <Get_CRLH_Position+0x96>
 80005b8:	2b80      	cmp	r3, #128	; 0x80
 80005ba:	dc11      	bgt.n	80005e0 <Get_CRLH_Position+0x38>
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d036      	beq.n	800062e <Get_CRLH_Position+0x86>
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	dc06      	bgt.n	80005d2 <Get_CRLH_Position+0x2a>
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d02e      	beq.n	8000626 <Get_CRLH_Position+0x7e>
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d02e      	beq.n	800062a <Get_CRLH_Position+0x82>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d028      	beq.n	8000622 <Get_CRLH_Position+0x7a>
 80005d0:	e047      	b.n	8000662 <Get_CRLH_Position+0xba>
 80005d2:	2b20      	cmp	r3, #32
 80005d4:	d02f      	beq.n	8000636 <Get_CRLH_Position+0x8e>
 80005d6:	2b40      	cmp	r3, #64	; 0x40
 80005d8:	d02f      	beq.n	800063a <Get_CRLH_Position+0x92>
 80005da:	2b10      	cmp	r3, #16
 80005dc:	d029      	beq.n	8000632 <Get_CRLH_Position+0x8a>
 80005de:	e040      	b.n	8000662 <Get_CRLH_Position+0xba>
 80005e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005e4:	d033      	beq.n	800064e <Get_CRLH_Position+0xa6>
 80005e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ea:	dc09      	bgt.n	8000600 <Get_CRLH_Position+0x58>
 80005ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005f0:	d029      	beq.n	8000646 <Get_CRLH_Position+0x9e>
 80005f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f6:	d028      	beq.n	800064a <Get_CRLH_Position+0xa2>
 80005f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005fc:	d021      	beq.n	8000642 <Get_CRLH_Position+0x9a>
 80005fe:	e030      	b.n	8000662 <Get_CRLH_Position+0xba>
 8000600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000604:	d027      	beq.n	8000656 <Get_CRLH_Position+0xae>
 8000606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800060a:	dc03      	bgt.n	8000614 <Get_CRLH_Position+0x6c>
 800060c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000610:	d01f      	beq.n	8000652 <Get_CRLH_Position+0xaa>
 8000612:	e026      	b.n	8000662 <Get_CRLH_Position+0xba>
 8000614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000618:	d01f      	beq.n	800065a <Get_CRLH_Position+0xb2>
 800061a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800061e:	d01e      	beq.n	800065e <Get_CRLH_Position+0xb6>
 8000620:	e01f      	b.n	8000662 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:  return 0;  break;
 8000622:	2300      	movs	r3, #0
 8000624:	e01e      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_1:  return 4;  break;
 8000626:	2304      	movs	r3, #4
 8000628:	e01c      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_2:  return 8;  break;
 800062a:	2308      	movs	r3, #8
 800062c:	e01a      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_3:  return 12; break;
 800062e:	230c      	movs	r3, #12
 8000630:	e018      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_4:  return 16; break;
 8000632:	2310      	movs	r3, #16
 8000634:	e016      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_5:  return 20; break;
 8000636:	2314      	movs	r3, #20
 8000638:	e014      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_6:  return 24; break;
 800063a:	2318      	movs	r3, #24
 800063c:	e012      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_7:  return 28; break;
 800063e:	231c      	movs	r3, #28
 8000640:	e010      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_8:  return 0;  break;
 8000642:	2300      	movs	r3, #0
 8000644:	e00e      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_9:  return 4;  break;
 8000646:	2304      	movs	r3, #4
 8000648:	e00c      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_10: return 8;  break;
 800064a:	2308      	movs	r3, #8
 800064c:	e00a      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_11: return 12; break;
 800064e:	230c      	movs	r3, #12
 8000650:	e008      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_12: return 16; break;
 8000652:	2310      	movs	r3, #16
 8000654:	e006      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_13: return 20; break;
 8000656:	2314      	movs	r3, #20
 8000658:	e004      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_14: return 24; break;
 800065a:	2318      	movs	r3, #24
 800065c:	e002      	b.n	8000664 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_15: return 28; break;
 800065e:	231c      	movs	r3, #28
 8000660:	e000      	b.n	8000664 <Get_CRLH_Position+0xbc>
	default:		  return 0;  break;
 8000662:	2300      	movs	r3, #0
	}
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <MCAL_GPIO_Init>:
 * @retval			- None
 * Note				- STM32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 					  But LQFP48 Package has only GPIO A, B, Part of C/D as external PINs
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 800066e:	b590      	push	{r4, r7, lr}
 8000670:	b085      	sub	sp, #20
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
	//	Port configuration register low (GPIOx_CRL) Configure pins 0 >> 7
	//	Port configuration register High (GPIOx_CRL) Configure pins 8 >> 15
	vuint32_t *ConfigRegister = NULL;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
	vuint8_t PIN_CNF_MODE;

	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d801      	bhi.n	8000688 <MCAL_GPIO_Init+0x1a>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	e001      	b.n	800068c <MCAL_GPIO_Init+0x1e>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3304      	adds	r3, #4
 800068c:	60fb      	str	r3, [r7, #12]

	//clear CNFy[1:0] MODEy[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff88 	bl	80005a8 <Get_CRLH_Position>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	230f      	movs	r3, #15
 800069e:	4093      	lsls	r3, r2
 80006a0:	43da      	mvns	r2, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	401a      	ands	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]

	//If Pin is Output
	if( (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) )
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	d00b      	beq.n	80006cc <MCAL_GPIO_Init+0x5e>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b05      	cmp	r3, #5
 80006ba:	d007      	beq.n	80006cc <MCAL_GPIO_Init+0x5e>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	2b06      	cmp	r3, #6
 80006c2:	d003      	beq.n	80006cc <MCAL_GPIO_Init+0x5e>
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	2b07      	cmp	r3, #7
 80006ca:	d10f      	bne.n	80006ec <MCAL_GPIO_Init+0x7e>
	{
		//Set CNFy[1:0] MODEy[1:0]
		PIN_CNF_MODE = ( (((PinConfig->GPIO_Mode - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	789b      	ldrb	r3, [r3, #2]
 80006d0:	3b04      	subs	r3, #4
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	b25a      	sxtb	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72fb      	strb	r3, [r7, #11]
 80006ea:	e02e      	b.n	800074a <MCAL_GPIO_Init+0xdc>

	//If Pin is Input
	else // Mode = 00: input Mode (reset value)
	{
		//Set CNFy[1:0] MODEy[1:0]
		if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_Mode == GPIO_MODE_Analog))
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	789b      	ldrb	r3, [r3, #2]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d003      	beq.n	80006fc <MCAL_GPIO_Init+0x8e>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d108      	bne.n	800070e <MCAL_GPIO_Init+0xa0>
		{
			PIN_CNF_MODE = (((PinConfig->GPIO_Mode << 2) | 0x0) & 0x0F);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 030f 	and.w	r3, r3, #15
 8000708:	b2db      	uxtb	r3, r3
 800070a:	72fb      	strb	r3, [r7, #11]
 800070c:	e01d      	b.n	800074a <MCAL_GPIO_Init+0xdc>
		}
		else if(PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT) //Note: AF_INPUT is treated as Floating
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	2b08      	cmp	r3, #8
 8000714:	d102      	bne.n	800071c <MCAL_GPIO_Init+0xae>
		{
			PIN_CNF_MODE = (((GPIO_MODE_INPUT_FLO << 2) | 0x0) & 0x0F);
 8000716:	2304      	movs	r3, #4
 8000718:	72fb      	strb	r3, [r7, #11]
 800071a:	e016      	b.n	800074a <MCAL_GPIO_Init+0xdc>
		}
		else //PU PD Input
		{

			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d10c      	bne.n	800073e <MCAL_GPIO_Init+0xd0>
			{
				PIN_CNF_MODE = (((GPIO_MODE_INPUT_PU << 2) | 0x0) & 0x0F);
 8000724:	2308      	movs	r3, #8
 8000726:	72fb      	strb	r3, [r7, #11]
				//Table 20. Port bit configuration table PxODR -> 1
				GPIOx->ODR |= (1 << PinConfig->GPIO_PinNumber);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	8812      	ldrh	r2, [r2, #0]
 8000730:	4611      	mov	r1, r2
 8000732:	2201      	movs	r2, #1
 8000734:	408a      	lsls	r2, r1
 8000736:	431a      	orrs	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	e005      	b.n	800074a <MCAL_GPIO_Init+0xdc>
			}
			else //PULL down Input
			{
				PIN_CNF_MODE = (((GPIO_MODE_INPUT_PU << 2) | 0x0) & 0x0F); //Note: Pull-down has same value as Pull-up
 800073e:	2308      	movs	r3, #8
 8000740:	72fb      	strb	r3, [r7, #11]
				//Table 20. Port bit configuration table PxODR -> 0
				GPIOx->ODR |= (0 << PinConfig->GPIO_PinNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//Write on CLR or CRH
	(*ConfigRegister) |= ( PIN_CNF_MODE << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461c      	mov	r4, r3
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff27 	bl	80005a8 <Get_CRLH_Position>
 800075a:	4603      	mov	r3, r0
 800075c:	fa04 f203 	lsl.w	r2, r4, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	431a      	orrs	r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bd90      	pop	{r4, r7, pc}

08000772 <MCAL_GPIO_WritePin>:
 * @param [in]		- Value: the value to write on Pin
 * @retval			- None
 * Note				- None
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	460b      	mov	r3, r1
 800077c:	807b      	strh	r3, [r7, #2]
 800077e:	4613      	mov	r3, r2
 8000780:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET)
 8000782:	787b      	ldrb	r3, [r7, #1]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <MCAL_GPIO_WritePin+0x1e>
			BRy: Port x Reset bit y (y= 0 .. 15)
		 	These bits are write-only and can be accessed in Word mode only.
			0: No action on the corresponding ODRx bit
		 	1: Reset the corresponding ODRx bit
		 	Note: If both BSx and BRx are set, BSx has priority.*/
		GPIOx->BSRR = (uint32)PinNumber;
 8000788:	887a      	ldrh	r2, [r7, #2]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	611a      	str	r2, [r3, #16]
		 	These bits are write-only and can be accessed in Word mode only.
			0: No action on the corresponding ODRx bit
		 	1: Reset the corresponding ODRx bit*/
		GPIOx->BRR = (uint32)PinNumber;
	}
}
 800078e:	e002      	b.n	8000796 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32)PinNumber;
 8000790:	887a      	ldrh	r2, [r7, #2]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	615a      	str	r2, [r3, #20]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <MCAL_GPIO_WritePort>:
 * @param [in]		- Value: the value to write on Pin
 * @retval			- None
 * Note				- None
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32)Value;
 80007ac:	887a      	ldrh	r2, [r7, #2]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60da      	str	r2, [r3, #12]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <MCAL_RCC_GetSYSCLKFreq>:
// 1111: SYSCLK divided by 512

const uint8 AHB_PrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32 MCAL_RCC_GetSYSCLKFreq(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
//	 Set and cleared by hardware to indicate which clock source is used as system clock.
//	 00: HSI oscillator used as system clock
//	 01: HSE oscillator used as system clock
//	 10: PLL used as system clock

	switch((RCC->CFGR >> 2) & 0b11)
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	089b      	lsrs	r3, r3, #2
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d006      	beq.n	80007dc <MCAL_RCC_GetSYSCLKFreq+0x20>
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d302      	bcc.n	80007d8 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d004      	beq.n	80007e0 <MCAL_RCC_GetSYSCLKFreq+0x24>
 80007d6:	e005      	b.n	80007e4 <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
	case 0:

		return HSI_RC_CLK;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 80007da:	e004      	b.n	80007e6 <MCAL_RCC_GetSYSCLKFreq+0x2a>
		break;

	case 1:

		//Todo need to calculate it //HSE user should specify it
		return HSE_CLK;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 80007de:	e002      	b.n	80007e6 <MCAL_RCC_GetSYSCLKFreq+0x2a>
		break;

	case 2:

		//Todo need to calculate it //PLLMul user should specify it
		return 16000000;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <MCAL_RCC_GetSYSCLKFreq+0x3c>)
 80007e2:	e000      	b.n	80007e6 <MCAL_RCC_GetSYSCLKFreq+0x2a>
		break;
	}

	return HSI_RC_CLK;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <MCAL_RCC_GetSYSCLKFreq+0x38>)
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	007a1200 	.word	0x007a1200
 80007f8:	00f42400 	.word	0x00f42400

080007fc <MCAL_RCC_GetHCLKFreq>:

uint32 MCAL_RCC_GetHCLKFreq(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	// Bits 7:4HPRE: AHB prescaler
	return (MCAL_RCC_GetSYSCLKFreq() >> AHB_PrescTable[(RCC->CFGR >> 4) & 0xF]);
 8000800:	f7ff ffdc 	bl	80007bc <MCAL_RCC_GetSYSCLKFreq>
 8000804:	4601      	mov	r1, r0
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <MCAL_RCC_GetHCLKFreq+0x20>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	091b      	lsrs	r3, r3, #4
 800080c:	f003 030f 	and.w	r3, r3, #15
 8000810:	4a03      	ldr	r2, [pc, #12]	; (8000820 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000812:	5cd3      	ldrb	r3, [r2, r3]
 8000814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000818:	4618      	mov	r0, r3
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	08000e00 	.word	0x08000e00

08000824 <MCAL_RCC_GetPLCK1Freq>:


uint32 MCAL_RCC_GetPLCK1Freq(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1:  APB low-speed prescaler  (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APB_PrescTable[(RCC->CFGR >> 8) & 0b111]);
 8000828:	f7ff ffe8 	bl	80007fc <MCAL_RCC_GetHCLKFreq>
 800082c:	4601      	mov	r1, r0
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MCAL_RCC_GetPLCK1Freq+0x20>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <MCAL_RCC_GetPLCK1Freq+0x24>)
 800083a:	5cd3      	ldrb	r3, [r2, r3]
 800083c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000840:	4618      	mov	r0, r3
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	08000df8 	.word	0x08000df8

0800084c <MCAL_RCC_GetPLCK2Freq>:

uint32 MCAL_RCC_GetPLCK2Freq(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APB_PrescTable[(RCC->CFGR >> 11) & 0b111]);
 8000850:	f7ff ffd4 	bl	80007fc <MCAL_RCC_GetHCLKFreq>
 8000854:	4601      	mov	r1, r0
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <MCAL_RCC_GetPLCK2Freq+0x20>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	0adb      	lsrs	r3, r3, #11
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	4a03      	ldr	r2, [pc, #12]	; (8000870 <MCAL_RCC_GetPLCK2Freq+0x24>)
 8000862:	5cd3      	ldrb	r3, [r2, r3]
 8000864:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000868:	4618      	mov	r0, r3
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	08000df8 	.word	0x08000df8

08000874 <MCAL_UART_Init>:
 * ================================================================
 *
 * */

void MCAL_UART_Init(USART_TypedDef *UARTx, UART_PinConfig_t *UART_Config)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]

	uint32 pclk, BRR;

	//Save Config data & Enable Clock
	if(UARTx == USART1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a58      	ldr	r2, [pc, #352]	; (80009e4 <MCAL_UART_Init+0x170>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d109      	bne.n	800089a <MCAL_UART_Init+0x26>
	{
		GP_USART1_Config = UART_Config;
 8000886:	4a58      	ldr	r2, [pc, #352]	; (80009e8 <MCAL_UART_Init+0x174>)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	6013      	str	r3, [r2, #0]
		RCC_USART1_CLK_EN();
 800088c:	4b57      	ldr	r3, [pc, #348]	; (80009ec <MCAL_UART_Init+0x178>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a56      	ldr	r2, [pc, #344]	; (80009ec <MCAL_UART_Init+0x178>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	e01a      	b.n	80008d0 <MCAL_UART_Init+0x5c>
	}
	else if(UARTx == USART2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a54      	ldr	r2, [pc, #336]	; (80009f0 <MCAL_UART_Init+0x17c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d109      	bne.n	80008b6 <MCAL_UART_Init+0x42>
	{
		GP_USART2_Config = UART_Config;
 80008a2:	4a54      	ldr	r2, [pc, #336]	; (80009f4 <MCAL_UART_Init+0x180>)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	6013      	str	r3, [r2, #0]
		RCC_USART2_CLK_EN();
 80008a8:	4b50      	ldr	r3, [pc, #320]	; (80009ec <MCAL_UART_Init+0x178>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a4f      	ldr	r2, [pc, #316]	; (80009ec <MCAL_UART_Init+0x178>)
 80008ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	e00c      	b.n	80008d0 <MCAL_UART_Init+0x5c>
	}
	else if(UARTx == USART3)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a4d      	ldr	r2, [pc, #308]	; (80009f0 <MCAL_UART_Init+0x17c>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d108      	bne.n	80008d0 <MCAL_UART_Init+0x5c>
	{
		GP_USART3_Config = UART_Config;
 80008be:	4a4e      	ldr	r2, [pc, #312]	; (80009f8 <MCAL_UART_Init+0x184>)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	6013      	str	r3, [r2, #0]
		RCC_USART3_CLK_EN();
 80008c4:	4b49      	ldr	r3, [pc, #292]	; (80009ec <MCAL_UART_Init+0x178>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a48      	ldr	r2, [pc, #288]	; (80009ec <MCAL_UART_Init+0x178>)
 80008ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ce:	61d3      	str	r3, [r2, #28]
	}

	//Enable UART Module
	UARTx->CR1 = (1 << 13);  		//Bit 13 UE: USART enable
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d6:	60da      	str	r2, [r3, #12]

	//Enable TX and RX
	UARTx->CR1 |= UART_Config->Mode;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	7812      	ldrb	r2, [r2, #0]
 80008e0:	431a      	orrs	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60da      	str	r2, [r3, #12]

	//Payload width
	UARTx->CR1 |= UART_Config->Payload_Length;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	7a12      	ldrb	r2, [r2, #8]
 80008ee:	431a      	orrs	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	60da      	str	r2, [r3, #12]

	//Stop bits
	UARTx->CR2 |= UART_Config->StopBit;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	7a92      	ldrb	r2, [r2, #10]
 80008fc:	431a      	orrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	611a      	str	r2, [r3, #16]

	//Parity Mode
	UARTx->CR1 |= UART_Config->Parity;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	7a52      	ldrb	r2, [r2, #9]
 800090a:	431a      	orrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	60da      	str	r2, [r3, #12]

	//Flow Control
	UARTx->CR3 |= UART_Config->Hw_FlowCtl;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	7ad2      	ldrb	r2, [r2, #11]
 8000918:	431a      	orrs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	615a      	str	r2, [r3, #20]

	//Baud rate
	if(UARTx == USART1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <MCAL_UART_Init+0x170>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d103      	bne.n	800092e <MCAL_UART_Init+0xba>
	{
		pclk = MCAL_RCC_GetPLCK1Freq();
 8000926:	f7ff ff7d 	bl	8000824 <MCAL_RCC_GetPLCK1Freq>
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	e002      	b.n	8000934 <MCAL_UART_Init+0xc0>
	}
	else //(UARTx == USART2 or USART3)
	{
		pclk = MCAL_RCC_GetPLCK2Freq();
 800092e:	f7ff ff8d 	bl	800084c <MCAL_RCC_GetPLCK2Freq>
 8000932:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000940:	0119      	lsls	r1, r3, #4
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	009a      	lsls	r2, r3, #2
 800094c:	441a      	add	r2, r3
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	fbb2 f2f3 	udiv	r2, r2, r3
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	011b      	lsls	r3, r3, #4
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	fbb0 f3f3 	udiv	r3, r0, r3
 8000964:	2064      	movs	r0, #100	; 0x64
 8000966:	fb00 f303 	mul.w	r3, r0, r3
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	011b      	lsls	r3, r3, #4
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MCAL_UART_Init+0x188>)
 8000970:	fba2 2303 	umull	r2, r3, r2, r3
 8000974:	095b      	lsrs	r3, r3, #5
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	430b      	orrs	r3, r1
 800097c:	60bb      	str	r3, [r7, #8]

	UARTx->BRR = BRR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	609a      	str	r2, [r3, #8]

	//Enable/Disable Interrupt
	if(UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	7b1b      	ldrb	r3, [r3, #12]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d026      	beq.n	80009da <MCAL_UART_Init+0x166>
	{
		UARTx->CR1 |= UART_Config->IRQ_Enable;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	7b12      	ldrb	r2, [r2, #12]
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60da      	str	r2, [r3, #12]

		//Enable NVIC FOR UART IRQ
		if(UARTx == USART1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <MCAL_UART_Init+0x170>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d106      	bne.n	80009b0 <MCAL_UART_Init+0x13c>
			NVIC_IRQ37_USART1_Enable;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MCAL_UART_Init+0x18c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <MCAL_UART_Init+0x18c>)
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable;

		else if(UARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}
}
 80009ae:	e014      	b.n	80009da <MCAL_UART_Init+0x166>
		else if(UARTx == USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <MCAL_UART_Init+0x17c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d106      	bne.n	80009c6 <MCAL_UART_Init+0x152>
			NVIC_IRQ38_USART2_Enable;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MCAL_UART_Init+0x18c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MCAL_UART_Init+0x18c>)
 80009be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	e009      	b.n	80009da <MCAL_UART_Init+0x166>
		else if(UARTx == USART3)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <MCAL_UART_Init+0x17c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d105      	bne.n	80009da <MCAL_UART_Init+0x166>
			NVIC_IRQ39_USART3_Enable;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MCAL_UART_Init+0x18c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <MCAL_UART_Init+0x18c>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6013      	str	r3, [r2, #0]
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40013800 	.word	0x40013800
 80009e8:	20000080 	.word	0x20000080
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40004400 	.word	0x40004400
 80009f4:	20000084 	.word	0x20000084
 80009f8:	20000088 	.word	0x20000088
 80009fc:	51eb851f 	.word	0x51eb851f
 8000a00:	e000e104 	.word	0xe000e104

08000a04 <MCAL_UART_GPIO_Set_Pins>:
	}
}

//According to 9.1.11 GPIO configurations for device peripherals: Table 24. USARTs
void MCAL_UART_GPIO_Set_Pins(USART_TypedDef *UARTx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(UARTx == USART1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d118      	bne.n	8000a46 <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA9  		USART1_TX
		//PA10  	USART1_RX
		//PA11		USART1_CTS
		//PA12  	USART1_RTS

		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000a14:	2306      	movs	r3, #6
 8000a16:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a20:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a2a:	f7ff fe20 	bl	800066e <MCAL_GPIO_Init>

		PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a36:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a40:	f7ff fe15 	bl	800066e <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 8000a44:	e036      	b.n	8000ab4 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(UARTx == USART2)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d116      	bne.n	8000a7c <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
		PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000a56:	2301      	movs	r3, #1
 8000a58:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4817      	ldr	r0, [pc, #92]	; (8000ac0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a62:	f7ff fe04 	bl	800066e <MCAL_GPIO_Init>
		PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4619      	mov	r1, r3
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a76:	f7ff fdfa 	bl	800066e <MCAL_GPIO_Init>
}
 8000a7a:	e01b      	b.n	8000ab4 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(UARTx == USART3)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d117      	bne.n	8000ab4 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000a84:	2306      	movs	r3, #6
 8000a86:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a90:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000a9a:	f7ff fde8 	bl	800066e <MCAL_GPIO_Init>
		PinCfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa6:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000ab0:	f7ff fddd 	bl	800066e <MCAL_GPIO_Init>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40013800 	.word	0x40013800
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <MCAL_UART_SendData>:


void MCAL_UART_SendData(USART_TypedDef *UARTx, uint16 *pTxBuffer, enum Polling_mechnism PollingEN)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	71fb      	strb	r3, [r7, #7]
	//wait until TXE Flag is set in USART_SR
	if(PollingEN == enable)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d106      	bne.n	8000aee <MCAL_UART_SendData+0x22>
	{
		while( ! (UARTx->SR & (1 << 7) ) );
 8000ae0:	bf00      	nop
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0f9      	beq.n	8000ae2 <MCAL_UART_SendData+0x16>
	//	because it is replaced by the parity.
	//	 When receiving with the parity enabled, the value read in the MSB bit is the received parity
	//	bit.

	//check whether Pay load is set on 8Bit or 9Bit
	if(UARTx == USART1)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <MCAL_UART_SendData+0x68>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d105      	bne.n	8000b02 <MCAL_UART_SendData+0x36>
	{
		if(GP_USART1_Config->Payload_Length == USART_Payload_Length_9B)
			UARTx->DR = (*pTxBuffer & (uint16)0x1FF);

		else // USART_Payload_Length_8B)
			UARTx->DR = (*pTxBuffer & (uint8)0xFF);
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	605a      	str	r2, [r3, #4]

		else // USART_Payload_Length_8B)
			UARTx->DR = (*pTxBuffer & (uint8)0xFF);
	}

}
 8000b00:	e012      	b.n	8000b28 <MCAL_UART_SendData+0x5c>
	else if(UARTx == USART2)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <MCAL_UART_SendData+0x6c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d105      	bne.n	8000b16 <MCAL_UART_SendData+0x4a>
			UARTx->DR = (*pTxBuffer & (uint8)0xFF);
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	605a      	str	r2, [r3, #4]
}
 8000b14:	e008      	b.n	8000b28 <MCAL_UART_SendData+0x5c>
	else if(UARTx == USART3)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <MCAL_UART_SendData+0x6c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d104      	bne.n	8000b28 <MCAL_UART_SendData+0x5c>
			UARTx->DR = (*pTxBuffer & (uint8)0xFF);
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	605a      	str	r2, [r3, #4]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40004400 	.word	0x40004400

08000b3c <MCAL_UART_RecieveData>:
	while( ! (UARTx->SR & (1 << 6) ) );
}


void MCAL_UART_RecieveData(USART_TypedDef *UARTx, uint16 *pTxBuffer, enum Polling_mechnism PollingEN)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	4613      	mov	r3, r2
 8000b48:	71fb      	strb	r3, [r7, #7]
	//Wait until Data is Received
	if(PollingEN == enable)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d106      	bne.n	8000b5e <MCAL_UART_RecieveData+0x22>
		while(! (UARTx->SR & (1 << 5) ));
 8000b50:	bf00      	nop
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0320 	and.w	r3, r3, #32
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <MCAL_UART_RecieveData+0x16>


	//check whether Payload is set on 8Bit or 9Bit
	if(UARTx == USART1)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <MCAL_UART_RecieveData+0xc8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d115      	bne.n	8000b92 <MCAL_UART_RecieveData+0x56>
				*( (uint16*)pTxBuffer ) = (UARTx->DR & (uint8)0xFF);
			}
		}
		else // USART_Payload_Length_8B)
		{
			if(GP_USART1_Config->Parity == USART_Parity_NONE)
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <MCAL_UART_RecieveData+0xcc>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	7a5b      	ldrb	r3, [r3, #9]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d107      	bne.n	8000b80 <MCAL_UART_RecieveData+0x44>
			{
				//No Parity so all 8 bits are considered Data
				*( (uint16*)pTxBuffer ) = (UARTx->DR & (uint8)0xFF);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	801a      	strh	r2, [r3, #0]
				//Parity is Used, so only first 7 bits are considered Data and MSB is Parity
				*( (uint16*)pTxBuffer ) = (UARTx->DR & (uint8)0x7F);
			}
		}
	}
}
 8000b7e:	e03b      	b.n	8000bf8 <MCAL_UART_RecieveData+0xbc>
				*( (uint16*)pTxBuffer ) = (UARTx->DR & (uint8)0x7F);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	801a      	strh	r2, [r3, #0]
}
 8000b90:	e032      	b.n	8000bf8 <MCAL_UART_RecieveData+0xbc>
	else if(UARTx == USART2)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <MCAL_UART_RecieveData+0xd0>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d115      	bne.n	8000bc6 <MCAL_UART_RecieveData+0x8a>
			if(GP_USART2_Config->Parity == USART_Parity_NONE)
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MCAL_UART_RecieveData+0xd4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d107      	bne.n	8000bb4 <MCAL_UART_RecieveData+0x78>
				*( (uint16*)pTxBuffer ) = (UARTx->DR & (uint8)0xFF);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	801a      	strh	r2, [r3, #0]
}
 8000bb2:	e021      	b.n	8000bf8 <MCAL_UART_RecieveData+0xbc>
				*( (uint16*)pTxBuffer ) = (UARTx->DR & (uint8)0x7F);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	801a      	strh	r2, [r3, #0]
}
 8000bc4:	e018      	b.n	8000bf8 <MCAL_UART_RecieveData+0xbc>
	else if(UARTx == USART3)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <MCAL_UART_RecieveData+0xd0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d114      	bne.n	8000bf8 <MCAL_UART_RecieveData+0xbc>
			if(GP_USART3_Config->Parity == USART_Parity_NONE)
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MCAL_UART_RecieveData+0xd8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	7a5b      	ldrb	r3, [r3, #9]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d107      	bne.n	8000be8 <MCAL_UART_RecieveData+0xac>
				*( (uint16*)pTxBuffer ) = (UARTx->DR & (uint8)0xFF);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	801a      	strh	r2, [r3, #0]
}
 8000be6:	e007      	b.n	8000bf8 <MCAL_UART_RecieveData+0xbc>
				*( (uint16*)pTxBuffer ) = (UARTx->DR & (uint8)0x7F);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	801a      	strh	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40013800 	.word	0x40013800
 8000c08:	20000080 	.word	0x20000080
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	20000084 	.word	0x20000084
 8000c14:	20000088 	.word	0x20000088

08000c18 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	GP_USART1_Config->P_IRQ_CallBack();
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <USART1_IRQHandler+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	4798      	blx	r3
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000080 	.word	0x20000080

08000c2c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	GP_USART2_Config->P_IRQ_CallBack();
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <USART2_IRQHandler+0x10>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	4798      	blx	r3
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000084 	.word	0x20000084

08000c40 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	GP_USART3_Config->P_IRQ_CallBack();
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <USART3_IRQHandler+0x10>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	4798      	blx	r3
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000088 	.word	0x20000088

08000c54 <Mina_UART_IRQ_CallBack>:

unsigned char ch;


void Mina_UART_IRQ_CallBack(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	MCAL_UART_RecieveData(USART1, &ch, disable);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4905      	ldr	r1, [pc, #20]	; (8000c70 <Mina_UART_IRQ_CallBack+0x1c>)
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <Mina_UART_IRQ_CallBack+0x20>)
 8000c5e:	f7ff ff6d 	bl	8000b3c <MCAL_UART_RecieveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 8000c62:	2200      	movs	r2, #0
 8000c64:	4902      	ldr	r1, [pc, #8]	; (8000c70 <Mina_UART_IRQ_CallBack+0x1c>)
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <Mina_UART_IRQ_CallBack+0x20>)
 8000c68:	f7ff ff30 	bl	8000acc <MCAL_UART_SendData>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000d0 	.word	0x200000d0
 8000c74:	40013800 	.word	0x40013800

08000c78 <main>:


int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
	//Enable CLokc
	RCC_GPIOA_CLK_EN();
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <main+0x64>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <main+0x64>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <main+0x64>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <main+0x64>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <main+0x64>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <main+0x64>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000ca2:	f7ff fa83 	bl	80001ac <LCD_INIT>

	//Uart Enable
	UART_PinConfig_t uartCFG;
	uartCFG.BaudRate = USART_BaudRate_115200;
 8000ca6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000caa:	60bb      	str	r3, [r7, #8]
	uartCFG.Hw_FlowCtl = USART_Hw_FlowCtl_NONE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

	uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNEIE;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_CallBack = Mina_UART_IRQ_CallBack;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <main+0x68>)
 8000cb6:	617b      	str	r3, [r7, #20]

	uartCFG.Mode = USART_MODE_TX_RX;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	713b      	strb	r3, [r7, #4]
	uartCFG.Parity = USART_Parity_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	737b      	strb	r3, [r7, #13]
	uartCFG.Payload_Length = USART_Payload_Length_8B;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	733b      	strb	r3, [r7, #12]
	uartCFG.StopBit = USART_StopBit_1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73bb      	strb	r3, [r7, #14]

	MCAL_UART_Init(USART1, &uartCFG);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <main+0x6c>)
 8000cce:	f7ff fdd1 	bl	8000874 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000cd2:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <main+0x6c>)
 8000cd4:	f7ff fe96 	bl	8000a04 <MCAL_UART_GPIO_Set_Pins>



	while(1)
 8000cd8:	e7fe      	b.n	8000cd8 <main+0x60>
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	08000c55 	.word	0x08000c55
 8000ce4:	40013800 	.word	0x40013800

08000ce8 <_wait>:
	/* Pretend like we always fail */
	return -1;
}

int _wait(int *status)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8000cf0:	f000 f834 	bl	8000d5c <__errno>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	6013      	str	r3, [r2, #0]
	return -1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d36:	f000 f817 	bl	8000d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3a:	f7ff ff9d 	bl	8000c78 <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   r0, =_estack
 8000d40:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d4c:	08000e18 	.word	0x08000e18
  ldr r2, =_sbss
 8000d50:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d54:	200000d8 	.word	0x200000d8

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <__errno>:
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <__errno+0x8>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000000 	.word	0x20000000

08000d68 <__libc_init_array>:
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	2500      	movs	r5, #0
 8000d6c:	4e0c      	ldr	r6, [pc, #48]	; (8000da0 <__libc_init_array+0x38>)
 8000d6e:	4c0d      	ldr	r4, [pc, #52]	; (8000da4 <__libc_init_array+0x3c>)
 8000d70:	1ba4      	subs	r4, r4, r6
 8000d72:	10a4      	asrs	r4, r4, #2
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	d109      	bne.n	8000d8c <__libc_init_array+0x24>
 8000d78:	f000 f832 	bl	8000de0 <_init>
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	4e0a      	ldr	r6, [pc, #40]	; (8000da8 <__libc_init_array+0x40>)
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <__libc_init_array+0x44>)
 8000d82:	1ba4      	subs	r4, r4, r6
 8000d84:	10a4      	asrs	r4, r4, #2
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	d105      	bne.n	8000d96 <__libc_init_array+0x2e>
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
 8000d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d90:	4798      	blx	r3
 8000d92:	3501      	adds	r5, #1
 8000d94:	e7ee      	b.n	8000d74 <__libc_init_array+0xc>
 8000d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d9a:	4798      	blx	r3
 8000d9c:	3501      	adds	r5, #1
 8000d9e:	e7f2      	b.n	8000d86 <__libc_init_array+0x1e>
 8000da0:	08000e10 	.word	0x08000e10
 8000da4:	08000e10 	.word	0x08000e10
 8000da8:	08000e10 	.word	0x08000e10
 8000dac:	08000e14 	.word	0x08000e14

08000db0 <wait>:
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <wait+0xc>)
 8000db2:	4601      	mov	r1, r0
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	f000 b803 	b.w	8000dc0 <_wait_r>
 8000dba:	bf00      	nop
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <_wait_r>:
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	4c05      	ldr	r4, [pc, #20]	; (8000ddc <_wait_r+0x1c>)
 8000dc6:	4605      	mov	r5, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	6023      	str	r3, [r4, #0]
 8000dcc:	f7ff ff8c 	bl	8000ce8 <_wait>
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	d102      	bne.n	8000dda <_wait_r+0x1a>
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	b103      	cbz	r3, 8000dda <_wait_r+0x1a>
 8000dd8:	602b      	str	r3, [r5, #0]
 8000dda:	bd38      	pop	{r3, r4, r5, pc}
 8000ddc:	200000d4 	.word	0x200000d4

08000de0 <_init>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr

08000dec <_fini>:
 8000dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dee:	bf00      	nop
 8000df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df2:	bc08      	pop	{r3}
 8000df4:	469e      	mov	lr, r3
 8000df6:	4770      	bx	lr
